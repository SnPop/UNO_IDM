/*
 * generated by Xtext 2.23.0
 */
package org.example.myunodsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyunodslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Model");
		private final Assignment cUnoAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cUnoUnoParserRuleCall_0 = (RuleCall)cUnoAssignment.eContents().get(0);
		
		//Model:
		//	uno+=Uno;
		@Override public ParserRule getRule() { return rule; }
		
		//uno+=Uno
		public Assignment getUnoAssignment() { return cUnoAssignment; }
		
		//Uno
		public RuleCall getUnoUnoParserRuleCall_0() { return cUnoUnoParserRuleCall_0; }
	}
	public class UnoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Uno");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cUnUnoKeyword_0_0 = (Keyword)cUnAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cConfAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cConfConfigurationParserRuleCall_2_0_0 = (RuleCall)cConfAssignment_2_0.eContents().get(0);
		private final Assignment cDeroulementAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cDeroulementDeroulementParserRuleCall_2_1_0 = (RuleCall)cDeroulementAssignment_2_1.eContents().get(0);
		private final Assignment cFinAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cFinFinParserRuleCall_2_2_0 = (RuleCall)cFinAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Uno:
		//	un='Uno' '{' (conf=Configuration & deroulement=Deroulement? & fin=Fin) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//un='Uno' '{' (conf=Configuration & deroulement=Deroulement? & fin=Fin) '}'
		public Group getGroup() { return cGroup; }
		
		//un='Uno'
		public Assignment getUnAssignment_0() { return cUnAssignment_0; }
		
		//'Uno'
		public Keyword getUnUnoKeyword_0_0() { return cUnUnoKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(conf=Configuration & deroulement=Deroulement? & fin=Fin)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//conf=Configuration
		public Assignment getConfAssignment_2_0() { return cConfAssignment_2_0; }
		
		//Configuration
		public RuleCall getConfConfigurationParserRuleCall_2_0_0() { return cConfConfigurationParserRuleCall_2_0_0; }
		
		//deroulement=Deroulement?
		public Assignment getDeroulementAssignment_2_1() { return cDeroulementAssignment_2_1; }
		
		//Deroulement
		public RuleCall getDeroulementDeroulementParserRuleCall_2_1_0() { return cDeroulementDeroulementParserRuleCall_2_1_0; }
		
		//fin=Fin
		public Assignment getFinAssignment_2_2() { return cFinAssignment_2_2; }
		
		//Fin
		public RuleCall getFinFinParserRuleCall_2_2_0() { return cFinFinParserRuleCall_2_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCfgAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCfgConfigurationKeyword_0_0 = (Keyword)cCfgAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cMainAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cMainMainParserRuleCall_2_0_0 = (RuleCall)cMainAssignment_2_0.eContents().get(0);
		private final Assignment cNbtdAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cNbtdNombre_de_Talons_de_departParserRuleCall_2_1_0 = (RuleCall)cNbtdAssignment_2_1.eContents().get(0);
		private final Assignment cRotationAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cRotationRotationParserRuleCall_2_2_0 = (RuleCall)cRotationAssignment_2_2.eContents().get(0);
		private final Assignment cNbjAssignment_2_3 = (Assignment)cUnorderedGroup_2.eContents().get(3);
		private final RuleCall cNbjNbjoueurParserRuleCall_2_3_0 = (RuleCall)cNbjAssignment_2_3.eContents().get(0);
		private final Assignment cEquipeAssignment_2_4 = (Assignment)cUnorderedGroup_2.eContents().get(4);
		private final RuleCall cEquipeEquipeParserRuleCall_2_4_0 = (RuleCall)cEquipeAssignment_2_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Configuration
		//Configuration:
		//	cfg='Configuration' '[' (main=Main & nbtd=Nombre_de_Talons_de_depart & rotation=Rotation & nbj=Nbjoueur &
		//	equipe=Equipe) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//cfg='Configuration' '[' (main=Main & nbtd=Nombre_de_Talons_de_depart & rotation=Rotation & nbj=Nbjoueur & equipe=Equipe)
		//']'
		public Group getGroup() { return cGroup; }
		
		//cfg='Configuration'
		public Assignment getCfgAssignment_0() { return cCfgAssignment_0; }
		
		//'Configuration'
		public Keyword getCfgConfigurationKeyword_0_0() { return cCfgConfigurationKeyword_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(main=Main & nbtd=Nombre_de_Talons_de_depart & rotation=Rotation & nbj=Nbjoueur & equipe=Equipe)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//main=Main
		public Assignment getMainAssignment_2_0() { return cMainAssignment_2_0; }
		
		//Main
		public RuleCall getMainMainParserRuleCall_2_0_0() { return cMainMainParserRuleCall_2_0_0; }
		
		//nbtd=Nombre_de_Talons_de_depart
		public Assignment getNbtdAssignment_2_1() { return cNbtdAssignment_2_1; }
		
		//Nombre_de_Talons_de_depart
		public RuleCall getNbtdNombre_de_Talons_de_departParserRuleCall_2_1_0() { return cNbtdNombre_de_Talons_de_departParserRuleCall_2_1_0; }
		
		//rotation=Rotation
		public Assignment getRotationAssignment_2_2() { return cRotationAssignment_2_2; }
		
		//Rotation
		public RuleCall getRotationRotationParserRuleCall_2_2_0() { return cRotationRotationParserRuleCall_2_2_0; }
		
		//nbj=Nbjoueur
		public Assignment getNbjAssignment_2_3() { return cNbjAssignment_2_3; }
		
		//Nbjoueur
		public RuleCall getNbjNbjoueurParserRuleCall_2_3_0() { return cNbjNbjoueurParserRuleCall_2_3_0; }
		
		//equipe=Equipe
		public Assignment getEquipeAssignment_2_4() { return cEquipeAssignment_2_4; }
		
		//Equipe
		public RuleCall getEquipeEquipeParserRuleCall_2_4_0() { return cEquipeEquipeParserRuleCall_2_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMainAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cMainMainKeyword_0_0 = (Keyword)cMainAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cVisibiliteAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cVisibiliteVisibiliteParserRuleCall_2_0_0 = (RuleCall)cVisibiliteAssignment_2_0.eContents().get(0);
		private final Assignment cNbmAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cNbmNombre_de_mains_de_departParserRuleCall_2_1_0 = (RuleCall)cNbmAssignment_2_1.eContents().get(0);
		private final Assignment cNbcAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cNbcNombre_de_cartes_de_departParserRuleCall_2_2_0 = (RuleCall)cNbcAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Main
		//Main:
		//	main='Main' '{' (visibilite=Visibilite & nbm=Nombre_de_mains_de_depart & nbc=Nombre_de_cartes_de_depart) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//main='Main' '{' (visibilite=Visibilite & nbm=Nombre_de_mains_de_depart & nbc=Nombre_de_cartes_de_depart) '}'
		public Group getGroup() { return cGroup; }
		
		//main='Main'
		public Assignment getMainAssignment_0() { return cMainAssignment_0; }
		
		//'Main'
		public Keyword getMainMainKeyword_0_0() { return cMainMainKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(visibilite=Visibilite & nbm=Nombre_de_mains_de_depart & nbc=Nombre_de_cartes_de_depart)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//visibilite=Visibilite
		public Assignment getVisibiliteAssignment_2_0() { return cVisibiliteAssignment_2_0; }
		
		//Visibilite
		public RuleCall getVisibiliteVisibiliteParserRuleCall_2_0_0() { return cVisibiliteVisibiliteParserRuleCall_2_0_0; }
		
		//nbm=Nombre_de_mains_de_depart
		public Assignment getNbmAssignment_2_1() { return cNbmAssignment_2_1; }
		
		//Nombre_de_mains_de_depart
		public RuleCall getNbmNombre_de_mains_de_departParserRuleCall_2_1_0() { return cNbmNombre_de_mains_de_departParserRuleCall_2_1_0; }
		
		//nbc=Nombre_de_cartes_de_depart
		public Assignment getNbcAssignment_2_2() { return cNbcAssignment_2_2; }
		
		//Nombre_de_cartes_de_depart
		public RuleCall getNbcNombre_de_cartes_de_departParserRuleCall_2_2_0() { return cNbcNombre_de_cartes_de_departParserRuleCall_2_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class VisibiliteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Visibilite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cVisibiliteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVisAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cVisAlternatives_3_0 = (Alternatives)cVisAssignment_3.eContents().get(0);
		private final Keyword cVisVisibleKeyword_3_0_0 = (Keyword)cVisAlternatives_3_0.eContents().get(0);
		private final Keyword cVisCachEKeyword_3_0_1 = (Keyword)cVisAlternatives_3_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Visibilite:
		//	'<' 'Visibilite' ':' vis=('Visible' | 'Cachée') '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' 'Visibilite' ':' vis=('Visible' | 'Cachée') '>'
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//'Visibilite'
		public Keyword getVisibiliteKeyword_1() { return cVisibiliteKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//vis=('Visible' | 'Cachée')
		public Assignment getVisAssignment_3() { return cVisAssignment_3; }
		
		//('Visible' | 'Cachée')
		public Alternatives getVisAlternatives_3_0() { return cVisAlternatives_3_0; }
		
		//'Visible'
		public Keyword getVisVisibleKeyword_3_0_0() { return cVisVisibleKeyword_3_0_0; }
		
		//'Cachée'
		public Keyword getVisCachEKeyword_3_0_1() { return cVisCachEKeyword_3_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}
	public class Nombre_de_mains_de_departElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Nombre_de_mains_de_depart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNbmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNbmNombreDeMainsDeDepartKeyword_1_0 = (Keyword)cNbmAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMainAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cMainAlternatives_3_0 = (Alternatives)cMainAssignment_3.eContents().get(0);
		private final Keyword cMain1MainKeyword_3_0_0 = (Keyword)cMainAlternatives_3_0.eContents().get(0);
		private final Keyword cMainPlusieursMainsKeyword_3_0_1 = (Keyword)cMainAlternatives_3_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Nombre_de_mains_de_depart:
		//	'<' nbm='Nombre de mains de depart' ':' main=('1 main' | 'Plusieurs mains') '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' nbm='Nombre de mains de depart' ':' main=('1 main' | 'Plusieurs mains') '>'
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//nbm='Nombre de mains de depart'
		public Assignment getNbmAssignment_1() { return cNbmAssignment_1; }
		
		//'Nombre de mains de depart'
		public Keyword getNbmNombreDeMainsDeDepartKeyword_1_0() { return cNbmNombreDeMainsDeDepartKeyword_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//main=('1 main' | 'Plusieurs mains')
		public Assignment getMainAssignment_3() { return cMainAssignment_3; }
		
		//('1 main' | 'Plusieurs mains')
		public Alternatives getMainAlternatives_3_0() { return cMainAlternatives_3_0; }
		
		//'1 main'
		public Keyword getMain1MainKeyword_3_0_0() { return cMain1MainKeyword_3_0_0; }
		
		//'Plusieurs mains'
		public Keyword getMainPlusieursMainsKeyword_3_0_1() { return cMainPlusieursMainsKeyword_3_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}
	public class Nombre_de_cartes_de_departElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Nombre_de_cartes_de_depart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNbcAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNbcNombreDeCartesDeDepartKeyword_1_0 = (Keyword)cNbcAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCartesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cCartesAlternatives_3_0 = (Alternatives)cCartesAssignment_3.eContents().get(0);
		private final Keyword cCartes7Keyword_3_0_0 = (Keyword)cCartesAlternatives_3_0.eContents().get(0);
		private final Keyword cCartes4Keyword_3_0_1 = (Keyword)cCartesAlternatives_3_0.eContents().get(1);
		private final Keyword cCartes715Keyword_3_0_2 = (Keyword)cCartesAlternatives_3_0.eContents().get(2);
		private final Keyword cCartesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Nombre_de_cartes_de_depart:
		//	'<' nbc='Nombre de cartes de depart' ':' cartes=('7' | '4' | '7-15') 'cartes' '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' nbc='Nombre de cartes de depart' ':' cartes=('7' | '4' | '7-15') 'cartes' '>'
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//nbc='Nombre de cartes de depart'
		public Assignment getNbcAssignment_1() { return cNbcAssignment_1; }
		
		//'Nombre de cartes de depart'
		public Keyword getNbcNombreDeCartesDeDepartKeyword_1_0() { return cNbcNombreDeCartesDeDepartKeyword_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//cartes=('7' | '4' | '7-15')
		public Assignment getCartesAssignment_3() { return cCartesAssignment_3; }
		
		//('7' | '4' | '7-15')
		public Alternatives getCartesAlternatives_3_0() { return cCartesAlternatives_3_0; }
		
		//'7'
		public Keyword getCartes7Keyword_3_0_0() { return cCartes7Keyword_3_0_0; }
		
		//'4'
		public Keyword getCartes4Keyword_3_0_1() { return cCartes4Keyword_3_0_1; }
		
		//'7-15'
		public Keyword getCartes715Keyword_3_0_2() { return cCartes715Keyword_3_0_2; }
		
		//'cartes'
		public Keyword getCartesKeyword_4() { return cCartesKeyword_4; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
	}
	public class Nombre_de_Talons_de_departElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Nombre_de_Talons_de_depart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNbtalonAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNbtalonNombreDeTalonsKeyword_0_0 = (Keyword)cNbtalonAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTalonAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTalonAlternatives_2_0 = (Alternatives)cTalonAssignment_2.eContents().get(0);
		private final Keyword cTalon1TalonKeyword_2_0_0 = (Keyword)cTalonAlternatives_2_0.eContents().get(0);
		private final Keyword cTalon3TalonsKeyword_2_0_1 = (Keyword)cTalonAlternatives_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////
		//Nombre_de_Talons_de_depart:
		//	nbtalon='Nombre de talons' '{'
		//	talon=('1 talon'
		//	| '3 talons')
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//nbtalon='Nombre de talons' '{' talon=('1 talon' | '3 talons') '}'
		public Group getGroup() { return cGroup; }
		
		//nbtalon='Nombre de talons'
		public Assignment getNbtalonAssignment_0() { return cNbtalonAssignment_0; }
		
		//'Nombre de talons'
		public Keyword getNbtalonNombreDeTalonsKeyword_0_0() { return cNbtalonNombreDeTalonsKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//talon=('1 talon' | '3 talons')
		public Assignment getTalonAssignment_2() { return cTalonAssignment_2; }
		
		//('1 talon' | '3 talons')
		public Alternatives getTalonAlternatives_2_0() { return cTalonAlternatives_2_0; }
		
		//'1 talon'
		public Keyword getTalon1TalonKeyword_2_0_0() { return cTalon1TalonKeyword_2_0_0; }
		
		//'3 talons'
		public Keyword getTalon3TalonsKeyword_2_0_1() { return cTalon3TalonsKeyword_2_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class RotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Rotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cRotationRotationKeyword_0_0 = (Keyword)cRotationAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cS1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cS1Alternatives_2_0 = (Alternatives)cS1Assignment_2.eContents().get(0);
		private final Keyword cS1SensDesAiguillesDUneMontreKeyword_2_0_0 = (Keyword)cS1Alternatives_2_0.eContents().get(0);
		private final Keyword cS1SensContraireDesAiguillesDUneMontreKeyword_2_0_1 = (Keyword)cS1Alternatives_2_0.eContents().get(1);
		private final Keyword cS1SensDeDistributionKeyword_2_0_2 = (Keyword)cS1Alternatives_2_0.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Rotation:
		//	rotation='Rotation' '{'
		//	s1=('Sens des aiguilles d une montre' | 'Sens contraire des aiguilles d une montre' | 'Sens de distribution')
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//rotation='Rotation' '{' s1=('Sens des aiguilles d une montre' | 'Sens contraire des aiguilles d une montre' |
		//'Sens de distribution') '}'
		public Group getGroup() { return cGroup; }
		
		//rotation='Rotation'
		public Assignment getRotationAssignment_0() { return cRotationAssignment_0; }
		
		//'Rotation'
		public Keyword getRotationRotationKeyword_0_0() { return cRotationRotationKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//s1=('Sens des aiguilles d une montre' | 'Sens contraire des aiguilles d une montre' | 'Sens de distribution')
		public Assignment getS1Assignment_2() { return cS1Assignment_2; }
		
		//('Sens des aiguilles d une montre' | 'Sens contraire des aiguilles d une montre' | 'Sens de distribution')
		public Alternatives getS1Alternatives_2_0() { return cS1Alternatives_2_0; }
		
		//'Sens des aiguilles d une montre'
		public Keyword getS1SensDesAiguillesDUneMontreKeyword_2_0_0() { return cS1SensDesAiguillesDUneMontreKeyword_2_0_0; }
		
		//'Sens contraire des aiguilles d une montre'
		public Keyword getS1SensContraireDesAiguillesDUneMontreKeyword_2_0_1() { return cS1SensContraireDesAiguillesDUneMontreKeyword_2_0_1; }
		
		//'Sens de distribution'
		public Keyword getS1SensDeDistributionKeyword_2_0_2() { return cS1SensDeDistributionKeyword_2_0_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class NbjoueurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Nbjoueur");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNbjAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNbjNombreDeJoueurKeyword_0_0 = (Keyword)cNbjAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNAlternatives_2_0 = (Alternatives)cNAssignment_2.eContents().get(0);
		private final Keyword cN310Keyword_2_0_0 = (Keyword)cNAlternatives_2_0.eContents().get(0);
		private final Keyword cN2Keyword_2_0_1 = (Keyword)cNAlternatives_2_0.eContents().get(1);
		
		//Nbjoueur:
		//	nbj='Nombre de joueur' ':' n=('3-10' | '2');
		@Override public ParserRule getRule() { return rule; }
		
		//nbj='Nombre de joueur' ':' n=('3-10' | '2')
		public Group getGroup() { return cGroup; }
		
		//nbj='Nombre de joueur'
		public Assignment getNbjAssignment_0() { return cNbjAssignment_0; }
		
		//'Nombre de joueur'
		public Keyword getNbjNombreDeJoueurKeyword_0_0() { return cNbjNombreDeJoueurKeyword_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//n=('3-10' | '2')
		public Assignment getNAssignment_2() { return cNAssignment_2; }
		
		//('3-10' | '2')
		public Alternatives getNAlternatives_2_0() { return cNAlternatives_2_0; }
		
		//'3-10'
		public Keyword getN310Keyword_2_0_0() { return cN310Keyword_2_0_0; }
		
		//'2'
		public Keyword getN2Keyword_2_0_1() { return cN2Keyword_2_0_1; }
	}
	public class EquipeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Equipe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cJeuAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cJeuJeuKeyword_0_0 = (Keyword)cJeuAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEqAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cEqAlternatives_2_0 = (Alternatives)cEqAssignment_2.eContents().get(0);
		private final Keyword cEqSoloKeyword_2_0_0 = (Keyword)cEqAlternatives_2_0.eContents().get(0);
		private final Keyword cEqEquipesKeyword_2_0_1 = (Keyword)cEqAlternatives_2_0.eContents().get(1);
		
		//Equipe:
		//	jeu='Jeu' ':'
		//	eq=('Solo'
		//	| 'Equipes');
		@Override public ParserRule getRule() { return rule; }
		
		//jeu='Jeu' ':' eq=('Solo' | 'Equipes')
		public Group getGroup() { return cGroup; }
		
		//jeu='Jeu'
		public Assignment getJeuAssignment_0() { return cJeuAssignment_0; }
		
		//'Jeu'
		public Keyword getJeuJeuKeyword_0_0() { return cJeuJeuKeyword_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//eq=('Solo' | 'Equipes')
		public Assignment getEqAssignment_2() { return cEqAssignment_2; }
		
		//('Solo' | 'Equipes')
		public Alternatives getEqAlternatives_2_0() { return cEqAlternatives_2_0; }
		
		//'Solo'
		public Keyword getEqSoloKeyword_2_0_0() { return cEqSoloKeyword_2_0_0; }
		
		//'Equipes'
		public Keyword getEqEquipesKeyword_2_0_1() { return cEqEquipesKeyword_2_0_1; }
	}
	public class DeroulementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Deroulement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDerDeroulementKeyword_0_0 = (Keyword)cDerAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cPiocherAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cPiocherPiocherParserRuleCall_2_0_0 = (RuleCall)cPiocherAssignment_2_0.eContents().get(0);
		private final Assignment cCartesAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cCartesCartesParserRuleCall_2_1_0 = (RuleCall)cCartesAssignment_2_1.eContents().get(0);
		private final Assignment cPenaliterAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cPenaliterPenaliteParserRuleCall_2_2_0 = (RuleCall)cPenaliterAssignment_2_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/////Deroulement
		//Deroulement:
		//	der='Deroulement' '[' (piocher=Piocher & cartes=Cartes & penaliter=Penalite?) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//der='Deroulement' '[' (piocher=Piocher & cartes=Cartes & penaliter=Penalite?) ']'
		public Group getGroup() { return cGroup; }
		
		//der='Deroulement'
		public Assignment getDerAssignment_0() { return cDerAssignment_0; }
		
		//'Deroulement'
		public Keyword getDerDeroulementKeyword_0_0() { return cDerDeroulementKeyword_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(piocher=Piocher & cartes=Cartes & penaliter=Penalite?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//piocher=Piocher
		public Assignment getPiocherAssignment_2_0() { return cPiocherAssignment_2_0; }
		
		//Piocher
		public RuleCall getPiocherPiocherParserRuleCall_2_0_0() { return cPiocherPiocherParserRuleCall_2_0_0; }
		
		//cartes=Cartes
		public Assignment getCartesAssignment_2_1() { return cCartesAssignment_2_1; }
		
		//Cartes
		public RuleCall getCartesCartesParserRuleCall_2_1_0() { return cCartesCartesParserRuleCall_2_1_0; }
		
		//penaliter=Penalite?
		public Assignment getPenaliterAssignment_2_2() { return cPenaliterAssignment_2_2; }
		
		//Penalite
		public RuleCall getPenaliterPenaliteParserRuleCall_2_2_0() { return cPenaliterPenaliteParserRuleCall_2_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class PiocherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Piocher");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPioAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPioPiocherKeyword_0_0 = (Keyword)cPioAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cNbrAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cNbrNombre_de_carteParserRuleCall_2_0_0 = (RuleCall)cNbrAssignment_2_0.eContents().get(0);
		private final Assignment cOptpAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cOptpSeulementSiOnNePeutPasJouerKeyword_2_1_0 = (Keyword)cOptpAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Piocher:
		//	pio='Piocher' '{' (nbr=Nombre_de_carte & optp='seulement si on ne peut pas jouer'?) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//pio='Piocher' '{' (nbr=Nombre_de_carte & optp='seulement si on ne peut pas jouer'?) '}'
		public Group getGroup() { return cGroup; }
		
		//pio='Piocher'
		public Assignment getPioAssignment_0() { return cPioAssignment_0; }
		
		//'Piocher'
		public Keyword getPioPiocherKeyword_0_0() { return cPioPiocherKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(nbr=Nombre_de_carte & optp='seulement si on ne peut pas jouer'?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//nbr=Nombre_de_carte
		public Assignment getNbrAssignment_2_0() { return cNbrAssignment_2_0; }
		
		//Nombre_de_carte
		public RuleCall getNbrNombre_de_carteParserRuleCall_2_0_0() { return cNbrNombre_de_carteParserRuleCall_2_0_0; }
		
		//optp='seulement si on ne peut pas jouer'?
		public Assignment getOptpAssignment_2_1() { return cOptpAssignment_2_1; }
		
		//'seulement si on ne peut pas jouer'
		public Keyword getOptpSeulementSiOnNePeutPasJouerKeyword_2_1_0() { return cOptpSeulementSiOnNePeutPasJouerKeyword_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class Nombre_de_carteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Nombre_de_carte");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNbcAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNbcNombreDeCarteKeyword_0_0 = (Keyword)cNbcAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cCaAlternatives_2_0 = (Alternatives)cCaAssignment_2.eContents().get(0);
		private final Keyword cCa1CarteKeyword_2_0_0 = (Keyword)cCaAlternatives_2_0.eContents().get(0);
		private final Keyword cCaJusqu3Keyword_2_0_1 = (Keyword)cCaAlternatives_2_0.eContents().get(1);
		
		//Nombre_de_carte:
		//	nbc='Nombre de carte' ':' ca=('1 carte' | 'jusquà 3');
		@Override public ParserRule getRule() { return rule; }
		
		//nbc='Nombre de carte' ':' ca=('1 carte' | 'jusquà 3')
		public Group getGroup() { return cGroup; }
		
		//nbc='Nombre de carte'
		public Assignment getNbcAssignment_0() { return cNbcAssignment_0; }
		
		//'Nombre de carte'
		public Keyword getNbcNombreDeCarteKeyword_0_0() { return cNbcNombreDeCarteKeyword_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//ca=('1 carte' | 'jusquà 3')
		public Assignment getCaAssignment_2() { return cCaAssignment_2; }
		
		//('1 carte' | 'jusquà 3')
		public Alternatives getCaAlternatives_2_0() { return cCaAlternatives_2_0; }
		
		//'1 carte'
		public Keyword getCa1CarteKeyword_2_0_0() { return cCa1CarteKeyword_2_0_0; }
		
		//'jusquà 3'
		public Keyword getCaJusqu3Keyword_2_0_1() { return cCaJusqu3Keyword_2_0_1; }
	}
	public class CartesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Cartes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCaAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCaCartesKeyword_0_0 = (Keyword)cCaAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cCcAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cCcCumul_CartesParserRuleCall_2_0_0 = (RuleCall)cCcAssignment_2_0.eContents().get(0);
		private final Assignment cJpcAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cJpcJouer_plusieurs_cartesParserRuleCall_2_1_0 = (RuleCall)cJpcAssignment_2_1.eContents().get(0);
		private final Assignment cCljAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cCljCouper_le_jeuParserRuleCall_2_2_0 = (RuleCall)cCljAssignment_2_2.eContents().get(0);
		private final Assignment cCdmAssignment_2_3 = (Assignment)cUnorderedGroup_2.eContents().get(3);
		private final RuleCall cCdmChanger_de_mainsParserRuleCall_2_3_0 = (RuleCall)cCdmAssignment_2_3.eContents().get(0);
		private final Assignment cPAssignment_2_4 = (Assignment)cUnorderedGroup_2.eContents().get(4);
		private final RuleCall cPPlus4ParserRuleCall_2_4_0 = (RuleCall)cPAssignment_2_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////
		//Cartes:
		//	ca='cartes' '{' (cc=Cumul_Cartes? & jpc=Jouer_plusieurs_cartes? & clj=Couper_le_jeu? & cdm=Changer_de_mains? &
		//	p=Plus4?)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//ca='cartes' '{' (cc=Cumul_Cartes? & jpc=Jouer_plusieurs_cartes? & clj=Couper_le_jeu? & cdm=Changer_de_mains? & p=Plus4?)
		//'}'
		public Group getGroup() { return cGroup; }
		
		//ca='cartes'
		public Assignment getCaAssignment_0() { return cCaAssignment_0; }
		
		//'cartes'
		public Keyword getCaCartesKeyword_0_0() { return cCaCartesKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(cc=Cumul_Cartes? & jpc=Jouer_plusieurs_cartes? & clj=Couper_le_jeu? & cdm=Changer_de_mains? & p=Plus4?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//cc=Cumul_Cartes?
		public Assignment getCcAssignment_2_0() { return cCcAssignment_2_0; }
		
		//Cumul_Cartes
		public RuleCall getCcCumul_CartesParserRuleCall_2_0_0() { return cCcCumul_CartesParserRuleCall_2_0_0; }
		
		//jpc=Jouer_plusieurs_cartes?
		public Assignment getJpcAssignment_2_1() { return cJpcAssignment_2_1; }
		
		//Jouer_plusieurs_cartes
		public RuleCall getJpcJouer_plusieurs_cartesParserRuleCall_2_1_0() { return cJpcJouer_plusieurs_cartesParserRuleCall_2_1_0; }
		
		//clj=Couper_le_jeu?
		public Assignment getCljAssignment_2_2() { return cCljAssignment_2_2; }
		
		//Couper_le_jeu
		public RuleCall getCljCouper_le_jeuParserRuleCall_2_2_0() { return cCljCouper_le_jeuParserRuleCall_2_2_0; }
		
		//cdm=Changer_de_mains?
		public Assignment getCdmAssignment_2_3() { return cCdmAssignment_2_3; }
		
		//Changer_de_mains
		public RuleCall getCdmChanger_de_mainsParserRuleCall_2_3_0() { return cCdmChanger_de_mainsParserRuleCall_2_3_0; }
		
		//p=Plus4?
		public Assignment getPAssignment_2_4() { return cPAssignment_2_4; }
		
		//Plus4
		public RuleCall getPPlus4ParserRuleCall_2_4_0() { return cPPlus4ParserRuleCall_2_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class Cumul_CartesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Cumul_Cartes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCCumulKeyword_0_0 = (Keyword)cCAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cEffAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cEffEffetKeyword_2_0_0 = (Keyword)cEffAssignment_2_0.eContents().get(0);
		private final Assignment cPl2Assignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cPl2PLUS_DEUXParserRuleCall_2_1_0 = (RuleCall)cPl2Assignment_2_1.eContents().get(0);
		private final Assignment cPl4Assignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cPl4PLUS_QUATREParserRuleCall_2_2_0 = (RuleCall)cPl4Assignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Cumul_Cartes:
		//	c='cumul' '{' (eff='effet'? & pl2=PLUS_DEUX? & pl4=PLUS_QUATRE?)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//c='cumul' '{' (eff='effet'? & pl2=PLUS_DEUX? & pl4=PLUS_QUATRE?) '}'
		public Group getGroup() { return cGroup; }
		
		//c='cumul'
		public Assignment getCAssignment_0() { return cCAssignment_0; }
		
		//'cumul'
		public Keyword getCCumulKeyword_0_0() { return cCCumulKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(eff='effet'? & pl2=PLUS_DEUX? & pl4=PLUS_QUATRE?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//eff='effet'?
		public Assignment getEffAssignment_2_0() { return cEffAssignment_2_0; }
		
		//'effet'
		public Keyword getEffEffetKeyword_2_0_0() { return cEffEffetKeyword_2_0_0; }
		
		//pl2=PLUS_DEUX?
		public Assignment getPl2Assignment_2_1() { return cPl2Assignment_2_1; }
		
		//PLUS_DEUX
		public RuleCall getPl2PLUS_DEUXParserRuleCall_2_1_0() { return cPl2PLUS_DEUXParserRuleCall_2_1_0; }
		
		//pl4=PLUS_QUATRE?
		public Assignment getPl4Assignment_2_2() { return cPl4Assignment_2_2; }
		
		//PLUS_QUATRE
		public RuleCall getPl4PLUS_QUATREParserRuleCall_2_2_0() { return cPl4PLUS_QUATREParserRuleCall_2_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class Jouer_plusieurs_cartesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Jouer_plusieurs_cartes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cJpcAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cJpcJouerPlusieursCartesKeyword_0_0 = (Keyword)cJpcAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cSAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cSSuitesParserRuleCall_2_0_0 = (RuleCall)cSAssignment_2_0.eContents().get(0);
		private final Assignment cCAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cCCouleurKeyword_2_1_0 = (Keyword)cCAssignment_2_1.eContents().get(0);
		private final Assignment cNbAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cNbNombreKeyword_2_2_0 = (Keyword)cNbAssignment_2_2.eContents().get(0);
		private final Assignment cCusAssignment_2_3 = (Assignment)cUnorderedGroup_2.eContents().get(3);
		private final RuleCall cCusCartes_Uno_SpecialesParserRuleCall_2_3_0 = (RuleCall)cCusAssignment_2_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Jouer_plusieurs_cartes:
		//	jpc='Jouer plusieurs cartes'
		//	'{' (s=Suites? & c='couleur'? & nb='nombre'? & cus=cartes_Uno_Speciales?)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//jpc='Jouer plusieurs cartes' '{' (s=Suites? & c='couleur'? & nb='nombre'? & cus=cartes_Uno_Speciales?) '}'
		public Group getGroup() { return cGroup; }
		
		//jpc='Jouer plusieurs cartes'
		public Assignment getJpcAssignment_0() { return cJpcAssignment_0; }
		
		//'Jouer plusieurs cartes'
		public Keyword getJpcJouerPlusieursCartesKeyword_0_0() { return cJpcJouerPlusieursCartesKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(s=Suites? & c='couleur'? & nb='nombre'? & cus=cartes_Uno_Speciales?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//s=Suites?
		public Assignment getSAssignment_2_0() { return cSAssignment_2_0; }
		
		//Suites
		public RuleCall getSSuitesParserRuleCall_2_0_0() { return cSSuitesParserRuleCall_2_0_0; }
		
		//c='couleur'?
		public Assignment getCAssignment_2_1() { return cCAssignment_2_1; }
		
		//'couleur'
		public Keyword getCCouleurKeyword_2_1_0() { return cCCouleurKeyword_2_1_0; }
		
		//nb='nombre'?
		public Assignment getNbAssignment_2_2() { return cNbAssignment_2_2; }
		
		//'nombre'
		public Keyword getNbNombreKeyword_2_2_0() { return cNbNombreKeyword_2_2_0; }
		
		//cus=cartes_Uno_Speciales?
		public Assignment getCusAssignment_2_3() { return cCusAssignment_2_3; }
		
		//cartes_Uno_Speciales
		public RuleCall getCusCartes_Uno_SpecialesParserRuleCall_2_3_0() { return cCusCartes_Uno_SpecialesParserRuleCall_2_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class SuitesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Suites");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSuitesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSuitesSuiteKeyword_0_0 = (Keyword)cSuitesAssignment_0.eContents().get(0);
		private final Assignment cSrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cSrSuiteRoyaleKeyword_1_0 = (Keyword)cSrAssignment_1.eContents().get(0);
		
		//Suites:
		//	suites='Suite' sr='suite royale'?;
		@Override public ParserRule getRule() { return rule; }
		
		//suites='Suite' sr='suite royale'?
		public Group getGroup() { return cGroup; }
		
		//suites='Suite'
		public Assignment getSuitesAssignment_0() { return cSuitesAssignment_0; }
		
		//'Suite'
		public Keyword getSuitesSuiteKeyword_0_0() { return cSuitesSuiteKeyword_0_0; }
		
		//sr='suite royale'?
		public Assignment getSrAssignment_1() { return cSrAssignment_1; }
		
		//'suite royale'
		public Keyword getSrSuiteRoyaleKeyword_1_0() { return cSrSuiteRoyaleKeyword_1_0; }
	}
	public class Cartes_Uno_SpecialesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.cartes_Uno_Speciales");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCussAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCussCartesUnoSpecialesKeyword_0_0 = (Keyword)cCussAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPPlusParserRuleCall_2_0 = (RuleCall)cPAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//cartes_Uno_Speciales:
		//	cuss='cartes Uno speciales' '{' p=Plus '}';
		@Override public ParserRule getRule() { return rule; }
		
		//cuss='cartes Uno speciales' '{' p=Plus '}'
		public Group getGroup() { return cGroup; }
		
		//cuss='cartes Uno speciales'
		public Assignment getCussAssignment_0() { return cCussAssignment_0; }
		
		//'cartes Uno speciales'
		public Keyword getCussCartesUnoSpecialesKeyword_0_0() { return cCussCartesUnoSpecialesKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//p=Plus
		public Assignment getPAssignment_2() { return cPAssignment_2; }
		
		//Plus
		public RuleCall getPPlusParserRuleCall_2_0() { return cPPlusParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class PlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Plus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPlusAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPlusPlusKeyword_0_0 = (Keyword)cPlusAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cPdAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cPdPLUS_DEUXParserRuleCall_2_0_0 = (RuleCall)cPdAssignment_2_0.eContents().get(0);
		private final Assignment cKAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cKPLUS_QUATREParserRuleCall_2_1_0 = (RuleCall)cKAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Plus:
		//	plus='Plus' '{' (pd=PLUS_DEUX? & k=PLUS_QUATRE?) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//plus='Plus' '{' (pd=PLUS_DEUX? & k=PLUS_QUATRE?) '}'
		public Group getGroup() { return cGroup; }
		
		//plus='Plus'
		public Assignment getPlusAssignment_0() { return cPlusAssignment_0; }
		
		//'Plus'
		public Keyword getPlusPlusKeyword_0_0() { return cPlusPlusKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(pd=PLUS_DEUX? & k=PLUS_QUATRE?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//pd=PLUS_DEUX?
		public Assignment getPdAssignment_2_0() { return cPdAssignment_2_0; }
		
		//PLUS_DEUX
		public RuleCall getPdPLUS_DEUXParserRuleCall_2_0_0() { return cPdPLUS_DEUXParserRuleCall_2_0_0; }
		
		//k=PLUS_QUATRE?
		public Assignment getKAssignment_2_1() { return cKAssignment_2_1; }
		
		//PLUS_QUATRE
		public RuleCall getKPLUS_QUATREParserRuleCall_2_1_0() { return cKPLUS_QUATREParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class Couper_le_jeuElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Couper_le_jeu");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCljAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCljCouperLeJeuKeyword_0_0 = (Keyword)cCljAssignment_0.eContents().get(0);
		private final Assignment cMnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMnMeme_nombreParserRuleCall_1_0 = (RuleCall)cMnAssignment_1.eContents().get(0);
		
		////
		//Couper_le_jeu:
		//	clj='couper le jeu' mn=Meme_nombre?;
		@Override public ParserRule getRule() { return rule; }
		
		//clj='couper le jeu' mn=Meme_nombre?
		public Group getGroup() { return cGroup; }
		
		//clj='couper le jeu'
		public Assignment getCljAssignment_0() { return cCljAssignment_0; }
		
		//'couper le jeu'
		public Keyword getCljCouperLeJeuKeyword_0_0() { return cCljCouperLeJeuKeyword_0_0; }
		
		//mn=Meme_nombre?
		public Assignment getMnAssignment_1() { return cMnAssignment_1; }
		
		//Meme_nombre
		public RuleCall getMnMeme_nombreParserRuleCall_1_0() { return cMnMeme_nombreParserRuleCall_1_0; }
	}
	public class Meme_nombreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Meme_nombre");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cMnMemeNombreKeyword_0_0 = (Keyword)cMnAssignment_0.eContents().get(0);
		private final Assignment cMcAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cMcMemeCarteKeyword_1_0 = (Keyword)cMcAssignment_1.eContents().get(0);
		
		//Meme_nombre:
		//	mn='meme nombre' mc='meme carte'?;
		@Override public ParserRule getRule() { return rule; }
		
		//mn='meme nombre' mc='meme carte'?
		public Group getGroup() { return cGroup; }
		
		//mn='meme nombre'
		public Assignment getMnAssignment_0() { return cMnAssignment_0; }
		
		//'meme nombre'
		public Keyword getMnMemeNombreKeyword_0_0() { return cMnMemeNombreKeyword_0_0; }
		
		//mc='meme carte'?
		public Assignment getMcAssignment_1() { return cMcAssignment_1; }
		
		//'meme carte'
		public Keyword getMcMemeCarteKeyword_1_0() { return cMcMemeCarteKeyword_1_0; }
	}
	public class Changer_de_mainsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Changer_de_mains");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCdmAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCdmChangerDeMainsKeyword_0_0 = (Keyword)cCdmAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSevAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSevSeven_0ParserRuleCall_2_0 = (RuleCall)cSevAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////
		//Changer_de_mains:
		//	cdm='Changer de mains' '{' sev=Seven_0 '}';
		@Override public ParserRule getRule() { return rule; }
		
		//cdm='Changer de mains' '{' sev=Seven_0 '}'
		public Group getGroup() { return cGroup; }
		
		//cdm='Changer de mains'
		public Assignment getCdmAssignment_0() { return cCdmAssignment_0; }
		
		//'Changer de mains'
		public Keyword getCdmChangerDeMainsKeyword_0_0() { return cCdmChangerDeMainsKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//sev=Seven_0
		public Assignment getSevAssignment_2() { return cSevAssignment_2; }
		
		//Seven_0
		public RuleCall getSevSeven_0ParserRuleCall_2_0() { return cSevSeven_0ParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class Seven_0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Seven_0");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSeSeven_0Keyword_0_0 = (Keyword)cSeAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSeptAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cSeptSeptKeyword_2_0 = (Keyword)cSeptAssignment_2.eContents().get(0);
		private final Assignment cZeroAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cZeroZeroKeyword_3_0 = (Keyword)cZeroAssignment_3.eContents().get(0);
		
		//Seven_0:
		//	se='Seven_0' ':' sept='Sept'? zero='Zero'?;
		@Override public ParserRule getRule() { return rule; }
		
		//se='Seven_0' ':' sept='Sept'? zero='Zero'?
		public Group getGroup() { return cGroup; }
		
		//se='Seven_0'
		public Assignment getSeAssignment_0() { return cSeAssignment_0; }
		
		//'Seven_0'
		public Keyword getSeSeven_0Keyword_0_0() { return cSeSeven_0Keyword_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//sept='Sept'?
		public Assignment getSeptAssignment_2() { return cSeptAssignment_2; }
		
		//'Sept'
		public Keyword getSeptSeptKeyword_2_0() { return cSeptSeptKeyword_2_0; }
		
		//zero='Zero'?
		public Assignment getZeroAssignment_3() { return cZeroAssignment_3; }
		
		//'Zero'
		public Keyword getZeroZeroKeyword_3_0() { return cZeroZeroKeyword_3_0; }
	}
	public class Plus4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Plus4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPqqAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPqqPLUS_QUATREParserRuleCall_0_0 = (RuleCall)cPqqAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cPqAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cPqPLUS_QUATREParserRuleCall_2_0_0 = (RuleCall)cPqAssignment_2_0.eContents().get(0);
		private final Assignment cSsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cSsSeulementSiRienDAutreKeyword_2_1_0 = (Keyword)cSsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cItAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cItInterditDeFinirAvecUnKeyword_3_0_0 = (Keyword)cItAssignment_3_0.eContents().get(0);
		private final Assignment cPAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPPLUS_QUATREParserRuleCall_3_1_0 = (RuleCall)cPAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Plus4:
		//	pqq=PLUS_QUATRE '{' (pq=PLUS_QUATRE ss='seulement si rien d autre')? (it='Interdit de finir avec un' p=PLUS_QUATRE)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//pqq=PLUS_QUATRE '{' (pq=PLUS_QUATRE ss='seulement si rien d autre')? (it='Interdit de finir avec un' p=PLUS_QUATRE)? '}'
		public Group getGroup() { return cGroup; }
		
		//pqq=PLUS_QUATRE
		public Assignment getPqqAssignment_0() { return cPqqAssignment_0; }
		
		//PLUS_QUATRE
		public RuleCall getPqqPLUS_QUATREParserRuleCall_0_0() { return cPqqPLUS_QUATREParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(pq=PLUS_QUATRE ss='seulement si rien d autre')?
		public Group getGroup_2() { return cGroup_2; }
		
		//pq=PLUS_QUATRE
		public Assignment getPqAssignment_2_0() { return cPqAssignment_2_0; }
		
		//PLUS_QUATRE
		public RuleCall getPqPLUS_QUATREParserRuleCall_2_0_0() { return cPqPLUS_QUATREParserRuleCall_2_0_0; }
		
		//ss='seulement si rien d autre'
		public Assignment getSsAssignment_2_1() { return cSsAssignment_2_1; }
		
		//'seulement si rien d autre'
		public Keyword getSsSeulementSiRienDAutreKeyword_2_1_0() { return cSsSeulementSiRienDAutreKeyword_2_1_0; }
		
		//(it='Interdit de finir avec un' p=PLUS_QUATRE)?
		public Group getGroup_3() { return cGroup_3; }
		
		//it='Interdit de finir avec un'
		public Assignment getItAssignment_3_0() { return cItAssignment_3_0; }
		
		//'Interdit de finir avec un'
		public Keyword getItInterditDeFinirAvecUnKeyword_3_0_0() { return cItInterditDeFinirAvecUnKeyword_3_0_0; }
		
		//p=PLUS_QUATRE
		public Assignment getPAssignment_3_1() { return cPAssignment_3_1; }
		
		//PLUS_QUATRE
		public RuleCall getPPLUS_QUATREParserRuleCall_3_1_0() { return cPPLUS_QUATREParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PenaliteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Penalite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPenalitesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPenalitesPenalitesKeyword_0_0 = (Keyword)cPenalitesAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cCiAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cCiCommentaireIntempestifKeyword_2_0_0 = (Keyword)cCiAssignment_2_0.eContents().get(0);
		private final Assignment cContestationAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cContestationContestationsParserRuleCall_2_1_0 = (RuleCall)cContestationAssignment_2_1.eContents().get(0);
		private final Assignment cTpslAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cTpslTribunalPopulaireSiLitigeKeyword_2_2_0 = (Keyword)cTpslAssignment_2_2.eContents().get(0);
		private final Assignment cLtpsAssignment_2_3 = (Assignment)cUnorderedGroup_2.eContents().get(3);
		private final Keyword cLtpsLimiteDeTempsKeyword_2_3_0 = (Keyword)cLtpsAssignment_2_3.eContents().get(0);
		private final Assignment cPenaliteAssignment_2_4 = (Assignment)cUnorderedGroup_2.eContents().get(4);
		private final RuleCall cPenaliteSTRINGTerminalRuleCall_2_4_0 = (RuleCall)cPenaliteAssignment_2_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Penalite:
		//	penalites='Penalites' '{' (ci='commentaire intempestif'? & contestation=Contestations? &
		//	tpsl='Tribunal Populaire si litige'? & ltps='Limite de temps'? & penalite=STRING?)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//penalites='Penalites' '{' (ci='commentaire intempestif'? & contestation=Contestations? &
		//tpsl='Tribunal Populaire si litige'? & ltps='Limite de temps'? & penalite=STRING?) '}'
		public Group getGroup() { return cGroup; }
		
		//penalites='Penalites'
		public Assignment getPenalitesAssignment_0() { return cPenalitesAssignment_0; }
		
		//'Penalites'
		public Keyword getPenalitesPenalitesKeyword_0_0() { return cPenalitesPenalitesKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(ci='commentaire intempestif'? & contestation=Contestations? & tpsl='Tribunal Populaire si litige'? &
		//ltps='Limite de temps'? & penalite=STRING?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//ci='commentaire intempestif'?
		public Assignment getCiAssignment_2_0() { return cCiAssignment_2_0; }
		
		//'commentaire intempestif'
		public Keyword getCiCommentaireIntempestifKeyword_2_0_0() { return cCiCommentaireIntempestifKeyword_2_0_0; }
		
		//contestation=Contestations?
		public Assignment getContestationAssignment_2_1() { return cContestationAssignment_2_1; }
		
		//Contestations
		public RuleCall getContestationContestationsParserRuleCall_2_1_0() { return cContestationContestationsParserRuleCall_2_1_0; }
		
		//tpsl='Tribunal Populaire si litige'?
		public Assignment getTpslAssignment_2_2() { return cTpslAssignment_2_2; }
		
		//'Tribunal Populaire si litige'
		public Keyword getTpslTribunalPopulaireSiLitigeKeyword_2_2_0() { return cTpslTribunalPopulaireSiLitigeKeyword_2_2_0; }
		
		//ltps='Limite de temps'?
		public Assignment getLtpsAssignment_2_3() { return cLtpsAssignment_2_3; }
		
		//'Limite de temps'
		public Keyword getLtpsLimiteDeTempsKeyword_2_3_0() { return cLtpsLimiteDeTempsKeyword_2_3_0; }
		
		//penalite=STRING?
		public Assignment getPenaliteAssignment_2_4() { return cPenaliteAssignment_2_4; }
		
		//STRING
		public RuleCall getPenaliteSTRINGTerminalRuleCall_2_4_0() { return cPenaliteSTRINGTerminalRuleCall_2_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ContestationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Contestations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCContestationsKeyword_0_0 = (Keyword)cCAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cKAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cKPLUS_QUATREParserRuleCall_2_0_1_0 = (RuleCall)cKAssignment_2_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Keyword cTSeTromperKeyword_2_1_1_0 = (Keyword)cTAssignment_2_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Contestations:
		//	c='Contestations' '{' (('<' k=PLUS_QUATRE '>')? & ('<' t='se tromper' '>')?) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//c='Contestations' '{' (('<' k=PLUS_QUATRE '>')? & ('<' t='se tromper' '>')?) '}'
		public Group getGroup() { return cGroup; }
		
		//c='Contestations'
		public Assignment getCAssignment_0() { return cCAssignment_0; }
		
		//'Contestations'
		public Keyword getCContestationsKeyword_0_0() { return cCContestationsKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(('<' k=PLUS_QUATRE '>')? & ('<' t='se tromper' '>')?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//('<' k=PLUS_QUATRE '>')?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2_0_0() { return cLessThanSignKeyword_2_0_0; }
		
		//k=PLUS_QUATRE
		public Assignment getKAssignment_2_0_1() { return cKAssignment_2_0_1; }
		
		//PLUS_QUATRE
		public RuleCall getKPLUS_QUATREParserRuleCall_2_0_1_0() { return cKPLUS_QUATREParserRuleCall_2_0_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2_0_2() { return cGreaterThanSignKeyword_2_0_2; }
		
		//('<' t='se tromper' '>')?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2_1_0() { return cLessThanSignKeyword_2_1_0; }
		
		//t='se tromper'
		public Assignment getTAssignment_2_1_1() { return cTAssignment_2_1_1; }
		
		//'se tromper'
		public Keyword getTSeTromperKeyword_2_1_1_0() { return cTSeTromperKeyword_2_1_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2_1_2() { return cGreaterThanSignKeyword_2_1_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Fin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cFFinKeyword_0_0 = (Keyword)cFAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cFdmAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cFdmFin_de_mancheParserRuleCall_2_0_0 = (RuleCall)cFdmAssignment_2_0.eContents().get(0);
		private final Assignment cFdpAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cFdpFin_de_partieParserRuleCall_2_1_0 = (RuleCall)cFdpAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Fin
		//Fin:
		//	f='Fin' '[' (fdm=Fin_de_manche? & fdp=Fin_de_partie) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//f='Fin' '[' (fdm=Fin_de_manche? & fdp=Fin_de_partie) ']'
		public Group getGroup() { return cGroup; }
		
		//f='Fin'
		public Assignment getFAssignment_0() { return cFAssignment_0; }
		
		//'Fin'
		public Keyword getFFinKeyword_0_0() { return cFFinKeyword_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(fdm=Fin_de_manche? & fdp=Fin_de_partie)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//fdm=Fin_de_manche?
		public Assignment getFdmAssignment_2_0() { return cFdmAssignment_2_0; }
		
		//Fin_de_manche
		public RuleCall getFdmFin_de_mancheParserRuleCall_2_0_0() { return cFdmFin_de_mancheParserRuleCall_2_0_0; }
		
		//fdp=Fin_de_partie
		public Assignment getFdpAssignment_2_1() { return cFdpAssignment_2_1; }
		
		//Fin_de_partie
		public RuleCall getFdpFin_de_partieParserRuleCall_2_1_0() { return cFdpFin_de_partieParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class Fin_de_mancheElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Fin_de_manche");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFdmduAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cFdmduFinDeMancheKeyword_0_0 = (Keyword)cFdmduAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDuAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cDuDireUnoKeyword_2_0 = (Keyword)cDuAssignment_2.eContents().get(0);
		
		//Fin_de_manche:
		//	fdmdu='Fin de manche' ':' du='Dire Uno';
		@Override public ParserRule getRule() { return rule; }
		
		//fdmdu='Fin de manche' ':' du='Dire Uno'
		public Group getGroup() { return cGroup; }
		
		//fdmdu='Fin de manche'
		public Assignment getFdmduAssignment_0() { return cFdmduAssignment_0; }
		
		//'Fin de manche'
		public Keyword getFdmduFinDeMancheKeyword_0_0() { return cFdmduFinDeMancheKeyword_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//du='Dire Uno'
		public Assignment getDuAssignment_2() { return cDuAssignment_2; }
		
		//'Dire Uno'
		public Keyword getDuDireUnoKeyword_2_0() { return cDuDireUnoKeyword_2_0; }
	}
	public class Fin_de_partieElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Fin_de_partie");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cFdpvAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cFdpvFinDePartieVainceurKeyword_0_0_0 = (Keyword)cFdpvAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cVaiqueurAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVaiqueurVainqueurParserRuleCall_1_0 = (RuleCall)cVaiqueurAssignment_1.eContents().get(0);
		
		//Fin_de_partie:
		//	(fdpv='Fin de partie Vainceur' ':') vaiqueur=Vainqueur;
		@Override public ParserRule getRule() { return rule; }
		
		//(fdpv='Fin de partie Vainceur' ':') vaiqueur=Vainqueur
		public Group getGroup() { return cGroup; }
		
		//(fdpv='Fin de partie Vainceur' ':')
		public Group getGroup_0() { return cGroup_0; }
		
		//fdpv='Fin de partie Vainceur'
		public Assignment getFdpvAssignment_0_0() { return cFdpvAssignment_0_0; }
		
		//'Fin de partie Vainceur'
		public Keyword getFdpvFinDePartieVainceurKeyword_0_0_0() { return cFdpvFinDePartieVainceurKeyword_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//vaiqueur=Vainqueur
		public Assignment getVaiqueurAssignment_1() { return cVaiqueurAssignment_1; }
		
		//Vainqueur
		public RuleCall getVaiqueurVainqueurParserRuleCall_1_0() { return cVaiqueurVainqueurParserRuleCall_1_0; }
	}
	public class VainqueurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.Vainqueur");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cManchesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cManchesNombreDeManchesGagnEsKeyword_0_0 = (Keyword)cManchesAssignment_0.eContents().get(0);
		private final Assignment cMoinsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cMoinsMoinsDePointsKeyword_1_0 = (Keyword)cMoinsAssignment_1.eContents().get(0);
		private final Assignment cDernierAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cDernierDernierBattleRoyaleKeyword_2_0 = (Keyword)cDernierAssignment_2.eContents().get(0);
		private final Assignment cPlusAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cPlusPlusDePointsKeyword_3_0 = (Keyword)cPlusAssignment_3.eContents().get(0);
		
		//Vainqueur:
		//	manches='nombre de manches gagnées' | moins='moins de points' | dernier='dernier : battle royale' |
		//	plus='plus de points';
		@Override public ParserRule getRule() { return rule; }
		
		//manches='nombre de manches gagnées' | moins='moins de points' | dernier='dernier : battle royale' |
		//plus='plus de points'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//manches='nombre de manches gagnées'
		public Assignment getManchesAssignment_0() { return cManchesAssignment_0; }
		
		//'nombre de manches gagnées'
		public Keyword getManchesNombreDeManchesGagnEsKeyword_0_0() { return cManchesNombreDeManchesGagnEsKeyword_0_0; }
		
		//moins='moins de points'
		public Assignment getMoinsAssignment_1() { return cMoinsAssignment_1; }
		
		//'moins de points'
		public Keyword getMoinsMoinsDePointsKeyword_1_0() { return cMoinsMoinsDePointsKeyword_1_0; }
		
		//dernier='dernier : battle royale'
		public Assignment getDernierAssignment_2() { return cDernierAssignment_2; }
		
		//'dernier : battle royale'
		public Keyword getDernierDernierBattleRoyaleKeyword_2_0() { return cDernierDernierBattleRoyaleKeyword_2_0; }
		
		//plus='plus de points'
		public Assignment getPlusAssignment_3() { return cPlusAssignment_3; }
		
		//'plus de points'
		public Keyword getPlusPlusDePointsKeyword_3_0() { return cPlusPlusDePointsKeyword_3_0; }
	}
	public class PLUS_QUATREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.PLUS_QUATRE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPlqAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cPlqPlus4Keyword_0_0 = (Keyword)cPlqAssignment_0.eContents().get(0);
		private final Assignment cPqAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cPq4Keyword_1_0 = (Keyword)cPqAssignment_1.eContents().get(0);
		
		//PLUS_QUATRE:
		//	plq='Plus 4' | pq='+4';
		@Override public ParserRule getRule() { return rule; }
		
		//plq='Plus 4' | pq='+4'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//plq='Plus 4'
		public Assignment getPlqAssignment_0() { return cPlqAssignment_0; }
		
		//'Plus 4'
		public Keyword getPlqPlus4Keyword_0_0() { return cPlqPlus4Keyword_0_0; }
		
		//pq='+4'
		public Assignment getPqAssignment_1() { return cPqAssignment_1; }
		
		//'+4'
		public Keyword getPq4Keyword_1_0() { return cPq4Keyword_1_0; }
	}
	public class PLUS_DEUXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.myunodsl.Myunodsl.PLUS_DEUX");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPldAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cPldPlus2Keyword_0_0 = (Keyword)cPldAssignment_0.eContents().get(0);
		private final Assignment cPdAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cPd2Keyword_1_0 = (Keyword)cPdAssignment_1.eContents().get(0);
		
		//PLUS_DEUX:
		//	pld='Plus 2' | pd='+2';
		@Override public ParserRule getRule() { return rule; }
		
		//pld='Plus 2' | pd='+2'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pld='Plus 2'
		public Assignment getPldAssignment_0() { return cPldAssignment_0; }
		
		//'Plus 2'
		public Keyword getPldPlus2Keyword_0_0() { return cPldPlus2Keyword_0_0; }
		
		//pd='+2'
		public Assignment getPdAssignment_1() { return cPdAssignment_1; }
		
		//'+2'
		public Keyword getPd2Keyword_1_0() { return cPd2Keyword_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final UnoElements pUno;
	private final ConfigurationElements pConfiguration;
	private final MainElements pMain;
	private final VisibiliteElements pVisibilite;
	private final Nombre_de_mains_de_departElements pNombre_de_mains_de_depart;
	private final Nombre_de_cartes_de_departElements pNombre_de_cartes_de_depart;
	private final Nombre_de_Talons_de_departElements pNombre_de_Talons_de_depart;
	private final RotationElements pRotation;
	private final NbjoueurElements pNbjoueur;
	private final EquipeElements pEquipe;
	private final DeroulementElements pDeroulement;
	private final PiocherElements pPiocher;
	private final Nombre_de_carteElements pNombre_de_carte;
	private final CartesElements pCartes;
	private final Cumul_CartesElements pCumul_Cartes;
	private final Jouer_plusieurs_cartesElements pJouer_plusieurs_cartes;
	private final SuitesElements pSuites;
	private final Cartes_Uno_SpecialesElements pCartes_Uno_Speciales;
	private final PlusElements pPlus;
	private final Couper_le_jeuElements pCouper_le_jeu;
	private final Meme_nombreElements pMeme_nombre;
	private final Changer_de_mainsElements pChanger_de_mains;
	private final Seven_0Elements pSeven_0;
	private final Plus4Elements pPlus4;
	private final PenaliteElements pPenalite;
	private final ContestationsElements pContestations;
	private final FinElements pFin;
	private final Fin_de_mancheElements pFin_de_manche;
	private final Fin_de_partieElements pFin_de_partie;
	private final VainqueurElements pVainqueur;
	private final PLUS_QUATREElements pPLUS_QUATRE;
	private final PLUS_DEUXElements pPLUS_DEUX;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyunodslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pUno = new UnoElements();
		this.pConfiguration = new ConfigurationElements();
		this.pMain = new MainElements();
		this.pVisibilite = new VisibiliteElements();
		this.pNombre_de_mains_de_depart = new Nombre_de_mains_de_departElements();
		this.pNombre_de_cartes_de_depart = new Nombre_de_cartes_de_departElements();
		this.pNombre_de_Talons_de_depart = new Nombre_de_Talons_de_departElements();
		this.pRotation = new RotationElements();
		this.pNbjoueur = new NbjoueurElements();
		this.pEquipe = new EquipeElements();
		this.pDeroulement = new DeroulementElements();
		this.pPiocher = new PiocherElements();
		this.pNombre_de_carte = new Nombre_de_carteElements();
		this.pCartes = new CartesElements();
		this.pCumul_Cartes = new Cumul_CartesElements();
		this.pJouer_plusieurs_cartes = new Jouer_plusieurs_cartesElements();
		this.pSuites = new SuitesElements();
		this.pCartes_Uno_Speciales = new Cartes_Uno_SpecialesElements();
		this.pPlus = new PlusElements();
		this.pCouper_le_jeu = new Couper_le_jeuElements();
		this.pMeme_nombre = new Meme_nombreElements();
		this.pChanger_de_mains = new Changer_de_mainsElements();
		this.pSeven_0 = new Seven_0Elements();
		this.pPlus4 = new Plus4Elements();
		this.pPenalite = new PenaliteElements();
		this.pContestations = new ContestationsElements();
		this.pFin = new FinElements();
		this.pFin_de_manche = new Fin_de_mancheElements();
		this.pFin_de_partie = new Fin_de_partieElements();
		this.pVainqueur = new VainqueurElements();
		this.pPLUS_QUATRE = new PLUS_QUATREElements();
		this.pPLUS_DEUX = new PLUS_DEUXElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.example.myunodsl.Myunodsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	uno+=Uno;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Uno:
	//	un='Uno' '{' (conf=Configuration & deroulement=Deroulement? & fin=Fin) '}';
	public UnoElements getUnoAccess() {
		return pUno;
	}
	
	public ParserRule getUnoRule() {
		return getUnoAccess().getRule();
	}
	
	//// Configuration
	//Configuration:
	//	cfg='Configuration' '[' (main=Main & nbtd=Nombre_de_Talons_de_depart & rotation=Rotation & nbj=Nbjoueur &
	//	equipe=Equipe) ']';
	public ConfigurationElements getConfigurationAccess() {
		return pConfiguration;
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}
	
	//// Main
	//Main:
	//	main='Main' '{' (visibilite=Visibilite & nbm=Nombre_de_mains_de_depart & nbc=Nombre_de_cartes_de_depart) '}';
	public MainElements getMainAccess() {
		return pMain;
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}
	
	//Visibilite:
	//	'<' 'Visibilite' ':' vis=('Visible' | 'Cachée') '>';
	public VisibiliteElements getVisibiliteAccess() {
		return pVisibilite;
	}
	
	public ParserRule getVisibiliteRule() {
		return getVisibiliteAccess().getRule();
	}
	
	//Nombre_de_mains_de_depart:
	//	'<' nbm='Nombre de mains de depart' ':' main=('1 main' | 'Plusieurs mains') '>';
	public Nombre_de_mains_de_departElements getNombre_de_mains_de_departAccess() {
		return pNombre_de_mains_de_depart;
	}
	
	public ParserRule getNombre_de_mains_de_departRule() {
		return getNombre_de_mains_de_departAccess().getRule();
	}
	
	//Nombre_de_cartes_de_depart:
	//	'<' nbc='Nombre de cartes de depart' ':' cartes=('7' | '4' | '7-15') 'cartes' '>';
	public Nombre_de_cartes_de_departElements getNombre_de_cartes_de_departAccess() {
		return pNombre_de_cartes_de_depart;
	}
	
	public ParserRule getNombre_de_cartes_de_departRule() {
		return getNombre_de_cartes_de_departAccess().getRule();
	}
	
	////
	//Nombre_de_Talons_de_depart:
	//	nbtalon='Nombre de talons' '{'
	//	talon=('1 talon'
	//	| '3 talons')
	//	'}';
	public Nombre_de_Talons_de_departElements getNombre_de_Talons_de_departAccess() {
		return pNombre_de_Talons_de_depart;
	}
	
	public ParserRule getNombre_de_Talons_de_departRule() {
		return getNombre_de_Talons_de_departAccess().getRule();
	}
	
	//Rotation:
	//	rotation='Rotation' '{'
	//	s1=('Sens des aiguilles d une montre' | 'Sens contraire des aiguilles d une montre' | 'Sens de distribution')
	//	'}';
	public RotationElements getRotationAccess() {
		return pRotation;
	}
	
	public ParserRule getRotationRule() {
		return getRotationAccess().getRule();
	}
	
	//Nbjoueur:
	//	nbj='Nombre de joueur' ':' n=('3-10' | '2');
	public NbjoueurElements getNbjoueurAccess() {
		return pNbjoueur;
	}
	
	public ParserRule getNbjoueurRule() {
		return getNbjoueurAccess().getRule();
	}
	
	//Equipe:
	//	jeu='Jeu' ':'
	//	eq=('Solo'
	//	| 'Equipes');
	public EquipeElements getEquipeAccess() {
		return pEquipe;
	}
	
	public ParserRule getEquipeRule() {
		return getEquipeAccess().getRule();
	}
	
	/////Deroulement
	//Deroulement:
	//	der='Deroulement' '[' (piocher=Piocher & cartes=Cartes & penaliter=Penalite?) ']';
	public DeroulementElements getDeroulementAccess() {
		return pDeroulement;
	}
	
	public ParserRule getDeroulementRule() {
		return getDeroulementAccess().getRule();
	}
	
	//Piocher:
	//	pio='Piocher' '{' (nbr=Nombre_de_carte & optp='seulement si on ne peut pas jouer'?) '}';
	public PiocherElements getPiocherAccess() {
		return pPiocher;
	}
	
	public ParserRule getPiocherRule() {
		return getPiocherAccess().getRule();
	}
	
	//Nombre_de_carte:
	//	nbc='Nombre de carte' ':' ca=('1 carte' | 'jusquà 3');
	public Nombre_de_carteElements getNombre_de_carteAccess() {
		return pNombre_de_carte;
	}
	
	public ParserRule getNombre_de_carteRule() {
		return getNombre_de_carteAccess().getRule();
	}
	
	////
	//Cartes:
	//	ca='cartes' '{' (cc=Cumul_Cartes? & jpc=Jouer_plusieurs_cartes? & clj=Couper_le_jeu? & cdm=Changer_de_mains? &
	//	p=Plus4?)
	//	'}';
	public CartesElements getCartesAccess() {
		return pCartes;
	}
	
	public ParserRule getCartesRule() {
		return getCartesAccess().getRule();
	}
	
	//Cumul_Cartes:
	//	c='cumul' '{' (eff='effet'? & pl2=PLUS_DEUX? & pl4=PLUS_QUATRE?)
	//	'}';
	public Cumul_CartesElements getCumul_CartesAccess() {
		return pCumul_Cartes;
	}
	
	public ParserRule getCumul_CartesRule() {
		return getCumul_CartesAccess().getRule();
	}
	
	//Jouer_plusieurs_cartes:
	//	jpc='Jouer plusieurs cartes'
	//	'{' (s=Suites? & c='couleur'? & nb='nombre'? & cus=cartes_Uno_Speciales?)
	//	'}';
	public Jouer_plusieurs_cartesElements getJouer_plusieurs_cartesAccess() {
		return pJouer_plusieurs_cartes;
	}
	
	public ParserRule getJouer_plusieurs_cartesRule() {
		return getJouer_plusieurs_cartesAccess().getRule();
	}
	
	//Suites:
	//	suites='Suite' sr='suite royale'?;
	public SuitesElements getSuitesAccess() {
		return pSuites;
	}
	
	public ParserRule getSuitesRule() {
		return getSuitesAccess().getRule();
	}
	
	//cartes_Uno_Speciales:
	//	cuss='cartes Uno speciales' '{' p=Plus '}';
	public Cartes_Uno_SpecialesElements getCartes_Uno_SpecialesAccess() {
		return pCartes_Uno_Speciales;
	}
	
	public ParserRule getCartes_Uno_SpecialesRule() {
		return getCartes_Uno_SpecialesAccess().getRule();
	}
	
	//Plus:
	//	plus='Plus' '{' (pd=PLUS_DEUX? & k=PLUS_QUATRE?) '}';
	public PlusElements getPlusAccess() {
		return pPlus;
	}
	
	public ParserRule getPlusRule() {
		return getPlusAccess().getRule();
	}
	
	////
	//Couper_le_jeu:
	//	clj='couper le jeu' mn=Meme_nombre?;
	public Couper_le_jeuElements getCouper_le_jeuAccess() {
		return pCouper_le_jeu;
	}
	
	public ParserRule getCouper_le_jeuRule() {
		return getCouper_le_jeuAccess().getRule();
	}
	
	//Meme_nombre:
	//	mn='meme nombre' mc='meme carte'?;
	public Meme_nombreElements getMeme_nombreAccess() {
		return pMeme_nombre;
	}
	
	public ParserRule getMeme_nombreRule() {
		return getMeme_nombreAccess().getRule();
	}
	
	////
	//Changer_de_mains:
	//	cdm='Changer de mains' '{' sev=Seven_0 '}';
	public Changer_de_mainsElements getChanger_de_mainsAccess() {
		return pChanger_de_mains;
	}
	
	public ParserRule getChanger_de_mainsRule() {
		return getChanger_de_mainsAccess().getRule();
	}
	
	//Seven_0:
	//	se='Seven_0' ':' sept='Sept'? zero='Zero'?;
	public Seven_0Elements getSeven_0Access() {
		return pSeven_0;
	}
	
	public ParserRule getSeven_0Rule() {
		return getSeven_0Access().getRule();
	}
	
	//Plus4:
	//	pqq=PLUS_QUATRE '{' (pq=PLUS_QUATRE ss='seulement si rien d autre')? (it='Interdit de finir avec un' p=PLUS_QUATRE)?
	//	'}';
	public Plus4Elements getPlus4Access() {
		return pPlus4;
	}
	
	public ParserRule getPlus4Rule() {
		return getPlus4Access().getRule();
	}
	
	//Penalite:
	//	penalites='Penalites' '{' (ci='commentaire intempestif'? & contestation=Contestations? &
	//	tpsl='Tribunal Populaire si litige'? & ltps='Limite de temps'? & penalite=STRING?)
	//	'}';
	public PenaliteElements getPenaliteAccess() {
		return pPenalite;
	}
	
	public ParserRule getPenaliteRule() {
		return getPenaliteAccess().getRule();
	}
	
	//Contestations:
	//	c='Contestations' '{' (('<' k=PLUS_QUATRE '>')? & ('<' t='se tromper' '>')?) '}';
	public ContestationsElements getContestationsAccess() {
		return pContestations;
	}
	
	public ParserRule getContestationsRule() {
		return getContestationsAccess().getRule();
	}
	
	//// Fin
	//Fin:
	//	f='Fin' '[' (fdm=Fin_de_manche? & fdp=Fin_de_partie) ']';
	public FinElements getFinAccess() {
		return pFin;
	}
	
	public ParserRule getFinRule() {
		return getFinAccess().getRule();
	}
	
	//Fin_de_manche:
	//	fdmdu='Fin de manche' ':' du='Dire Uno';
	public Fin_de_mancheElements getFin_de_mancheAccess() {
		return pFin_de_manche;
	}
	
	public ParserRule getFin_de_mancheRule() {
		return getFin_de_mancheAccess().getRule();
	}
	
	//Fin_de_partie:
	//	(fdpv='Fin de partie Vainceur' ':') vaiqueur=Vainqueur;
	public Fin_de_partieElements getFin_de_partieAccess() {
		return pFin_de_partie;
	}
	
	public ParserRule getFin_de_partieRule() {
		return getFin_de_partieAccess().getRule();
	}
	
	//Vainqueur:
	//	manches='nombre de manches gagnées' | moins='moins de points' | dernier='dernier : battle royale' |
	//	plus='plus de points';
	public VainqueurElements getVainqueurAccess() {
		return pVainqueur;
	}
	
	public ParserRule getVainqueurRule() {
		return getVainqueurAccess().getRule();
	}
	
	//PLUS_QUATRE:
	//	plq='Plus 4' | pq='+4';
	public PLUS_QUATREElements getPLUS_QUATREAccess() {
		return pPLUS_QUATRE;
	}
	
	public ParserRule getPLUS_QUATRERule() {
		return getPLUS_QUATREAccess().getRule();
	}
	
	//PLUS_DEUX:
	//	pld='Plus 2' | pd='+2';
	public PLUS_DEUXElements getPLUS_DEUXAccess() {
		return pPLUS_DEUX;
	}
	
	public ParserRule getPLUS_DEUXRule() {
		return getPLUS_DEUXAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
