/*
 * generated by Xtext 2.23.0
 */
package org.example.myunodsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.example.myunodsl.myunodsl.Cartes;
import org.example.myunodsl.myunodsl.Changer_de_mains;
import org.example.myunodsl.myunodsl.Configuration;
import org.example.myunodsl.myunodsl.Contestations;
import org.example.myunodsl.myunodsl.Couper_le_jeu;
import org.example.myunodsl.myunodsl.Cumul_Cartes;
import org.example.myunodsl.myunodsl.Deroulement;
import org.example.myunodsl.myunodsl.Equipe;
import org.example.myunodsl.myunodsl.Fin;
import org.example.myunodsl.myunodsl.Fin_de_manche;
import org.example.myunodsl.myunodsl.Fin_de_partie;
import org.example.myunodsl.myunodsl.Jouer_plusieurs_cartes;
import org.example.myunodsl.myunodsl.Main;
import org.example.myunodsl.myunodsl.Meme_nombre;
import org.example.myunodsl.myunodsl.Model;
import org.example.myunodsl.myunodsl.MyunodslPackage;
import org.example.myunodsl.myunodsl.Nbjoueur;
import org.example.myunodsl.myunodsl.Nombre_de_Talons_de_depart;
import org.example.myunodsl.myunodsl.Nombre_de_carte;
import org.example.myunodsl.myunodsl.Nombre_de_cartes_de_depart;
import org.example.myunodsl.myunodsl.Nombre_de_mains_de_depart;
import org.example.myunodsl.myunodsl.PLUS_DEUX;
import org.example.myunodsl.myunodsl.PLUS_QUATRE;
import org.example.myunodsl.myunodsl.Penalite;
import org.example.myunodsl.myunodsl.Piocher;
import org.example.myunodsl.myunodsl.Plus;
import org.example.myunodsl.myunodsl.Plus4;
import org.example.myunodsl.myunodsl.Rotation;
import org.example.myunodsl.myunodsl.Seven_0;
import org.example.myunodsl.myunodsl.Suites;
import org.example.myunodsl.myunodsl.Uno;
import org.example.myunodsl.myunodsl.Vainqueur;
import org.example.myunodsl.myunodsl.Visibilite;
import org.example.myunodsl.myunodsl.cartes_Uno_Speciales;
import org.example.myunodsl.services.MyunodslGrammarAccess;

@SuppressWarnings("all")
public class MyunodslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyunodslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyunodslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyunodslPackage.CARTES:
				sequence_Cartes(context, (Cartes) semanticObject); 
				return; 
			case MyunodslPackage.CHANGER_DE_MAINS:
				sequence_Changer_de_mains(context, (Changer_de_mains) semanticObject); 
				return; 
			case MyunodslPackage.CONFIGURATION:
				sequence_Configuration(context, (Configuration) semanticObject); 
				return; 
			case MyunodslPackage.CONTESTATIONS:
				sequence_Contestations(context, (Contestations) semanticObject); 
				return; 
			case MyunodslPackage.COUPER_LE_JEU:
				sequence_Couper_le_jeu(context, (Couper_le_jeu) semanticObject); 
				return; 
			case MyunodslPackage.CUMUL_CARTES:
				sequence_Cumul_Cartes(context, (Cumul_Cartes) semanticObject); 
				return; 
			case MyunodslPackage.DEROULEMENT:
				sequence_Deroulement(context, (Deroulement) semanticObject); 
				return; 
			case MyunodslPackage.EQUIPE:
				sequence_Equipe(context, (Equipe) semanticObject); 
				return; 
			case MyunodslPackage.FIN:
				sequence_Fin(context, (Fin) semanticObject); 
				return; 
			case MyunodslPackage.FIN_DE_MANCHE:
				sequence_Fin_de_manche(context, (Fin_de_manche) semanticObject); 
				return; 
			case MyunodslPackage.FIN_DE_PARTIE:
				sequence_Fin_de_partie(context, (Fin_de_partie) semanticObject); 
				return; 
			case MyunodslPackage.JOUER_PLUSIEURS_CARTES:
				sequence_Jouer_plusieurs_cartes(context, (Jouer_plusieurs_cartes) semanticObject); 
				return; 
			case MyunodslPackage.MAIN:
				sequence_Main(context, (Main) semanticObject); 
				return; 
			case MyunodslPackage.MEME_NOMBRE:
				sequence_Meme_nombre(context, (Meme_nombre) semanticObject); 
				return; 
			case MyunodslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyunodslPackage.NBJOUEUR:
				sequence_Nbjoueur(context, (Nbjoueur) semanticObject); 
				return; 
			case MyunodslPackage.NOMBRE_DE_TALONS_DE_DEPART:
				sequence_Nombre_de_Talons_de_depart(context, (Nombre_de_Talons_de_depart) semanticObject); 
				return; 
			case MyunodslPackage.NOMBRE_DE_CARTE:
				sequence_Nombre_de_carte(context, (Nombre_de_carte) semanticObject); 
				return; 
			case MyunodslPackage.NOMBRE_DE_CARTES_DE_DEPART:
				sequence_Nombre_de_cartes_de_depart(context, (Nombre_de_cartes_de_depart) semanticObject); 
				return; 
			case MyunodslPackage.NOMBRE_DE_MAINS_DE_DEPART:
				sequence_Nombre_de_mains_de_depart(context, (Nombre_de_mains_de_depart) semanticObject); 
				return; 
			case MyunodslPackage.PLUS_DEUX:
				sequence_PLUS_DEUX(context, (PLUS_DEUX) semanticObject); 
				return; 
			case MyunodslPackage.PLUS_QUATRE:
				sequence_PLUS_QUATRE(context, (PLUS_QUATRE) semanticObject); 
				return; 
			case MyunodslPackage.PENALITE:
				sequence_Penalite(context, (Penalite) semanticObject); 
				return; 
			case MyunodslPackage.PIOCHER:
				sequence_Piocher(context, (Piocher) semanticObject); 
				return; 
			case MyunodslPackage.PLUS:
				sequence_Plus(context, (Plus) semanticObject); 
				return; 
			case MyunodslPackage.PLUS4:
				sequence_Plus4(context, (Plus4) semanticObject); 
				return; 
			case MyunodslPackage.ROTATION:
				sequence_Rotation(context, (Rotation) semanticObject); 
				return; 
			case MyunodslPackage.SEVEN_0:
				sequence_Seven_0(context, (Seven_0) semanticObject); 
				return; 
			case MyunodslPackage.SUITES:
				sequence_Suites(context, (Suites) semanticObject); 
				return; 
			case MyunodslPackage.UNO:
				sequence_Uno(context, (Uno) semanticObject); 
				return; 
			case MyunodslPackage.VAINQUEUR:
				sequence_Vainqueur(context, (Vainqueur) semanticObject); 
				return; 
			case MyunodslPackage.VISIBILITE:
				sequence_Visibilite(context, (Visibilite) semanticObject); 
				return; 
			case MyunodslPackage.CARTES_UNO_SPECIALES:
				sequence_cartes_Uno_Speciales(context, (cartes_Uno_Speciales) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Cartes returns Cartes
	 *
	 * Constraint:
	 *     (ca='cartes' (cc=Cumul_Cartes | jpc=Jouer_plusieurs_cartes | clj=Couper_le_jeu | cdm=Changer_de_mains | p=Plus4)*)
	 */
	protected void sequence_Cartes(ISerializationContext context, Cartes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Changer_de_mains returns Changer_de_mains
	 *
	 * Constraint:
	 *     (cdm='Changer de mains' sev=Seven_0)
	 */
	protected void sequence_Changer_de_mains(ISerializationContext context, Changer_de_mains semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyunodslPackage.Literals.CHANGER_DE_MAINS__CDM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyunodslPackage.Literals.CHANGER_DE_MAINS__CDM));
			if (transientValues.isValueTransient(semanticObject, MyunodslPackage.Literals.CHANGER_DE_MAINS__SEV) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyunodslPackage.Literals.CHANGER_DE_MAINS__SEV));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getChanger_de_mainsAccess().getCdmChangerDeMainsKeyword_0_0(), semanticObject.getCdm());
		feeder.accept(grammarAccess.getChanger_de_mainsAccess().getSevSeven_0ParserRuleCall_2_0(), semanticObject.getSev());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Configuration returns Configuration
	 *
	 * Constraint:
	 *     (cfg='Configuration' (main=Main | nbtd=Nombre_de_Talons_de_depart | rotation=Rotation | nbj=Nbjoueur | equipe=Equipe)+)
	 */
	protected void sequence_Configuration(ISerializationContext context, Configuration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Contestations returns Contestations
	 *
	 * Constraint:
	 *     (c='Contestations' (k=PLUS_QUATRE | t='se tromper')*)
	 */
	protected void sequence_Contestations(ISerializationContext context, Contestations semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Couper_le_jeu returns Couper_le_jeu
	 *
	 * Constraint:
	 *     (clj='couper le jeu' mn=Meme_nombre?)
	 */
	protected void sequence_Couper_le_jeu(ISerializationContext context, Couper_le_jeu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Cumul_Cartes returns Cumul_Cartes
	 *
	 * Constraint:
	 *     (c='cumul' (eff='effet' | pl2=PLUS_DEUX | pl4=PLUS_QUATRE)*)
	 */
	protected void sequence_Cumul_Cartes(ISerializationContext context, Cumul_Cartes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Deroulement returns Deroulement
	 *
	 * Constraint:
	 *     (der='Deroulement' (piocher=Piocher | cartes=Cartes | penaliter=Penalite)*)
	 */
	protected void sequence_Deroulement(ISerializationContext context, Deroulement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Equipe returns Equipe
	 *
	 * Constraint:
	 *     (jeu='Jeu' (eq='Solo' | eq='Equipes'))
	 */
	protected void sequence_Equipe(ISerializationContext context, Equipe semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Fin returns Fin
	 *
	 * Constraint:
	 *     (f='Fin' (fdm=Fin_de_manche | fdp=Fin_de_partie)*)
	 */
	protected void sequence_Fin(ISerializationContext context, Fin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Fin_de_manche returns Fin_de_manche
	 *
	 * Constraint:
	 *     (fdmdu='Fin de manche' du='Dire Uno')
	 */
	protected void sequence_Fin_de_manche(ISerializationContext context, Fin_de_manche semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyunodslPackage.Literals.FIN_DE_MANCHE__FDMDU) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyunodslPackage.Literals.FIN_DE_MANCHE__FDMDU));
			if (transientValues.isValueTransient(semanticObject, MyunodslPackage.Literals.FIN_DE_MANCHE__DU) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyunodslPackage.Literals.FIN_DE_MANCHE__DU));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFin_de_mancheAccess().getFdmduFinDeMancheKeyword_0_0(), semanticObject.getFdmdu());
		feeder.accept(grammarAccess.getFin_de_mancheAccess().getDuDireUnoKeyword_2_0(), semanticObject.getDu());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Fin_de_partie returns Fin_de_partie
	 *
	 * Constraint:
	 *     (fdpv='Fin de partie Vainceur' vaiqueur=Vainqueur)
	 */
	protected void sequence_Fin_de_partie(ISerializationContext context, Fin_de_partie semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyunodslPackage.Literals.FIN_DE_PARTIE__FDPV) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyunodslPackage.Literals.FIN_DE_PARTIE__FDPV));
			if (transientValues.isValueTransient(semanticObject, MyunodslPackage.Literals.FIN_DE_PARTIE__VAIQUEUR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyunodslPackage.Literals.FIN_DE_PARTIE__VAIQUEUR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFin_de_partieAccess().getFdpvFinDePartieVainceurKeyword_0_0_0(), semanticObject.getFdpv());
		feeder.accept(grammarAccess.getFin_de_partieAccess().getVaiqueurVainqueurParserRuleCall_1_0(), semanticObject.getVaiqueur());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Jouer_plusieurs_cartes returns Jouer_plusieurs_cartes
	 *
	 * Constraint:
	 *     (jpc='Jouer plusieurs cartes' (s=Suites | c='couleur' | nb='nombre' | cus=cartes_Uno_Speciales)*)
	 */
	protected void sequence_Jouer_plusieurs_cartes(ISerializationContext context, Jouer_plusieurs_cartes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Main returns Main
	 *
	 * Constraint:
	 *     (main='Main' (visibilite=Visibilite | nbm=Nombre_de_mains_de_depart | nbc=Nombre_de_cartes_de_depart)+)
	 */
	protected void sequence_Main(ISerializationContext context, Main semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Meme_nombre returns Meme_nombre
	 *
	 * Constraint:
	 *     (mn='meme nombre' mc='meme carte'?)
	 */
	protected void sequence_Meme_nombre(ISerializationContext context, Meme_nombre semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     uno+=Uno
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Nbjoueur returns Nbjoueur
	 *
	 * Constraint:
	 *     (nbj='Nombre de joueur' (n='3-10' | n='2'))
	 */
	protected void sequence_Nbjoueur(ISerializationContext context, Nbjoueur semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Nombre_de_Talons_de_depart returns Nombre_de_Talons_de_depart
	 *
	 * Constraint:
	 *     (nbtalon='Nombre de talons' (talon='1 talon' | talon='3 talons'))
	 */
	protected void sequence_Nombre_de_Talons_de_depart(ISerializationContext context, Nombre_de_Talons_de_depart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Nombre_de_carte returns Nombre_de_carte
	 *
	 * Constraint:
	 *     (nbc='Nombre de carte' (ca='1 carte' | ca='jusquà 3'))
	 */
	protected void sequence_Nombre_de_carte(ISerializationContext context, Nombre_de_carte semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Nombre_de_cartes_de_depart returns Nombre_de_cartes_de_depart
	 *
	 * Constraint:
	 *     (nbc='Nombre de cartes de depart' (cartes='7' | cartes='4' | cartes='7-15'))
	 */
	protected void sequence_Nombre_de_cartes_de_depart(ISerializationContext context, Nombre_de_cartes_de_depart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Nombre_de_mains_de_depart returns Nombre_de_mains_de_depart
	 *
	 * Constraint:
	 *     (nbm='Nombre de mains de depart' (main='1 main' | main='Plusieurs mains'))
	 */
	protected void sequence_Nombre_de_mains_de_depart(ISerializationContext context, Nombre_de_mains_de_depart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PLUS_DEUX returns PLUS_DEUX
	 *
	 * Constraint:
	 *     (pld='Plus 2' | pd='+2')
	 */
	protected void sequence_PLUS_DEUX(ISerializationContext context, PLUS_DEUX semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PLUS_QUATRE returns PLUS_QUATRE
	 *
	 * Constraint:
	 *     (plq='Plus 4' | pq='+4')
	 */
	protected void sequence_PLUS_QUATRE(ISerializationContext context, PLUS_QUATRE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Penalite returns Penalite
	 *
	 * Constraint:
	 *     (
	 *         penalites='Penalites' 
	 *         (ci='commentaire intempestif' | contestation=Contestations | tpsl='Tribunal Populaire si litige' | ltps='Limite de temps' | penalite=STRING)*
	 *     )
	 */
	protected void sequence_Penalite(ISerializationContext context, Penalite semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Piocher returns Piocher
	 *
	 * Constraint:
	 *     (pio='Piocher' (nbr=Nombre_de_carte | optp='seulement si on ne peut pas jouer')*)
	 */
	protected void sequence_Piocher(ISerializationContext context, Piocher semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Plus4 returns Plus4
	 *
	 * Constraint:
	 *     (pqq=PLUS_QUATRE (pq=PLUS_QUATRE ss='seulement si rien d autre')? (it='Interdit de finir avec un' p=PLUS_QUATRE)?)
	 */
	protected void sequence_Plus4(ISerializationContext context, Plus4 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Plus returns Plus
	 *
	 * Constraint:
	 *     (plus='Plus' (pd=PLUS_DEUX | k=PLUS_QUATRE)*)
	 */
	protected void sequence_Plus(ISerializationContext context, Plus semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Rotation returns Rotation
	 *
	 * Constraint:
	 *     (rotation='Rotation' (s1='Sens des aiguilles d une montre' | s1='Sens contraire des aiguilles d une montre' | s1='Sens de distribution'))
	 */
	protected void sequence_Rotation(ISerializationContext context, Rotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Seven_0 returns Seven_0
	 *
	 * Constraint:
	 *     (se='Seven_0' sept='Sept'? zero='Zero'?)
	 */
	protected void sequence_Seven_0(ISerializationContext context, Seven_0 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Suites returns Suites
	 *
	 * Constraint:
	 *     (suites='Suite' sr='suite royale'?)
	 */
	protected void sequence_Suites(ISerializationContext context, Suites semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Uno returns Uno
	 *
	 * Constraint:
	 *     (un='Uno' (conf=Configuration | deroulement=Deroulement | fin=Fin)*)
	 */
	protected void sequence_Uno(ISerializationContext context, Uno semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Vainqueur returns Vainqueur
	 *
	 * Constraint:
	 *     (manches='nombre de manches gagnées' | moins='moins de points' | dernier='dernier : battle royale' | plus='plus de points')
	 */
	protected void sequence_Vainqueur(ISerializationContext context, Vainqueur semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Visibilite returns Visibilite
	 *
	 * Constraint:
	 *     (vis='Visible' | vis='Cachée')
	 */
	protected void sequence_Visibilite(ISerializationContext context, Visibilite semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     cartes_Uno_Speciales returns cartes_Uno_Speciales
	 *
	 * Constraint:
	 *     (cuss='cartes Uno speciales' p=Plus)
	 */
	protected void sequence_cartes_Uno_Speciales(ISerializationContext context, cartes_Uno_Speciales semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyunodslPackage.Literals.CARTES_UNO_SPECIALES__CUSS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyunodslPackage.Literals.CARTES_UNO_SPECIALES__CUSS));
			if (transientValues.isValueTransient(semanticObject, MyunodslPackage.Literals.CARTES_UNO_SPECIALES__P) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyunodslPackage.Literals.CARTES_UNO_SPECIALES__P));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCartes_Uno_SpecialesAccess().getCussCartesUnoSpecialesKeyword_0_0(), semanticObject.getCuss());
		feeder.accept(grammarAccess.getCartes_Uno_SpecialesAccess().getPPlusParserRuleCall_2_0(), semanticObject.getP());
		feeder.finish();
	}
	
	
}
