/*
 * generated by Xtext 2.23.0
 */
grammar InternalMyUnoDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyUnoDslGrammarAccess;

}

@parser::members {

 	private MyUnoDslGrammarAccess grammarAccess;

    public InternalMyUnoDslParser(TokenStream input, MyUnoDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MyUnoDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getUnoConfigurationParserRuleCall_0_0());
				}
				lv_uno_0_0=ruleConfiguration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"uno",
						lv_uno_0_0,
						"org.xtext.example.mydsl.MyUnoDsl.Configuration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getDeroulementDeroulementParserRuleCall_1_0());
				}
				lv_deroulement_1_0=ruleDeroulement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"deroulement",
						lv_deroulement_1_0,
						"org.xtext.example.mydsl.MyUnoDsl.Deroulement");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getFinFinParserRuleCall_2_0());
				}
				lv_fin_2_0=ruleFin
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"fin",
						lv_fin_2_0,
						"org.xtext.example.mydsl.MyUnoDsl.Fin");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConfiguration
entryRuleConfiguration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConfigurationRule()); }
	iv_ruleConfiguration=ruleConfiguration
	{ $current=$iv_ruleConfiguration.current; }
	EOF;

// Rule Configuration
ruleConfiguration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConfigurationAccess().getMainParserRuleCall_0());
		}
		this_Main_0=ruleMain
		{
			$current = $this_Main_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConfigurationAccess().getNbtNombre_de_Talons_de_departParserRuleCall_1_0());
				}
				lv_nbt_1_0=ruleNombre_de_Talons_de_depart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConfigurationRule());
					}
					set(
						$current,
						"nbt",
						lv_nbt_1_0,
						"org.xtext.example.mydsl.MyUnoDsl.Nombre_de_Talons_de_depart");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConfigurationAccess().getRotRotationParserRuleCall_2_0());
				}
				lv_rot_2_0=ruleRotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConfigurationRule());
					}
					set(
						$current,
						"rot",
						lv_rot_2_0,
						"org.xtext.example.mydsl.MyUnoDsl.Rotation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConfigurationAccess().getEquEquipeParserRuleCall_3_0());
				}
				lv_equ_3_0=ruleEquipe
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConfigurationRule());
					}
					set(
						$current,
						"equ",
						lv_equ_3_0,
						"org.xtext.example.mydsl.MyUnoDsl.Equipe");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMain
entryRuleMain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMainRule()); }
	iv_ruleMain=ruleMain
	{ $current=$iv_ruleMain.current; }
	EOF;

// Rule Main
ruleMain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMainAccess().getVisibiliteVisibiliteParserRuleCall_0_0());
				}
				lv_visibilite_0_0=ruleVisibilite
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMainRule());
					}
					set(
						$current,
						"visibilite",
						lv_visibilite_0_0,
						"org.xtext.example.mydsl.MyUnoDsl.Visibilite");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMainAccess().getNbmNombre_de_mains_de_departParserRuleCall_1_0());
				}
				lv_nbm_1_0=ruleNombre_de_mains_de_depart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMainRule());
					}
					set(
						$current,
						"nbm",
						lv_nbm_1_0,
						"org.xtext.example.mydsl.MyUnoDsl.Nombre_de_mains_de_depart");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMainAccess().getNbcNombre_de_cartes_de_departParserRuleCall_2_0());
				}
				lv_nbc_2_0=ruleNombre_de_cartes_de_depart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMainRule());
					}
					set(
						$current,
						"nbc",
						lv_nbc_2_0,
						"org.xtext.example.mydsl.MyUnoDsl.Nombre_de_cartes_de_depart");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVisibilite
entryRuleVisibilite returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVisibiliteRule()); }
	iv_ruleVisibilite=ruleVisibilite
	{ $current=$iv_ruleVisibilite.current.getText(); }
	EOF;

// Rule Visibilite
ruleVisibilite returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Visible'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVisibiliteAccess().getVisibleKeyword_0());
		}
		    |
		kw='Cach\u00E9e'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVisibiliteAccess().getCachEKeyword_1());
		}
	)
;

// Entry rule entryRuleNombre_de_mains_de_depart
entryRuleNombre_de_mains_de_depart returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNombre_de_mains_de_departRule()); }
	iv_ruleNombre_de_mains_de_depart=ruleNombre_de_mains_de_depart
	{ $current=$iv_ruleNombre_de_mains_de_depart.current.getText(); }
	EOF;

// Rule Nombre_de_mains_de_depart
ruleNombre_de_mains_de_depart returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='1'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNombre_de_mains_de_departAccess().getDigitOneKeyword_0_0());
			}
			kw='main'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNombre_de_mains_de_departAccess().getMainKeyword_0_1());
			}
		)
		    |
		(
			kw='Plusieurs'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNombre_de_mains_de_departAccess().getPlusieursKeyword_1_0());
			}
			kw='mains'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNombre_de_mains_de_departAccess().getMainsKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleNombre_de_cartes_de_depart
entryRuleNombre_de_cartes_de_depart returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNombre_de_cartes_de_departRule()); }
	iv_ruleNombre_de_cartes_de_depart=ruleNombre_de_cartes_de_depart
	{ $current=$iv_ruleNombre_de_cartes_de_depart.current.getText(); }
	EOF;

// Rule Nombre_de_cartes_de_depart
ruleNombre_de_cartes_de_depart returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='7'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNombre_de_cartes_de_departAccess().getDigitSevenKeyword_0_0());
			}
			kw='cartes'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNombre_de_cartes_de_departAccess().getCartesKeyword_0_1());
			}
		)
		    |
		(
			kw='4'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNombre_de_cartes_de_departAccess().getDigitFourKeyword_1_0());
			}
			kw='cartes'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNombre_de_cartes_de_departAccess().getCartesKeyword_1_1());
			}
		)
		    |
		(
			kw='7-15'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNombre_de_cartes_de_departAccess().getDigitSevenHyphenMinusDigitOneDigitFiveKeyword_2_0());
			}
			kw='cartes'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNombre_de_cartes_de_departAccess().getCartesKeyword_2_1());
			}
		)
	)
;

// Entry rule entryRuleNombre_de_Talons_de_depart
entryRuleNombre_de_Talons_de_depart returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNombre_de_Talons_de_departRule()); }
	iv_ruleNombre_de_Talons_de_depart=ruleNombre_de_Talons_de_depart
	{ $current=$iv_ruleNombre_de_Talons_de_depart.current.getText(); }
	EOF;

// Rule Nombre_de_Talons_de_depart
ruleNombre_de_Talons_de_depart returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='1'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNombre_de_Talons_de_departAccess().getDigitOneKeyword_0_0());
			}
			kw='talon'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNombre_de_Talons_de_departAccess().getTalonKeyword_0_1());
			}
		)
		    |
		(
			kw='3'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNombre_de_Talons_de_departAccess().getDigitThreeKeyword_1_0());
			}
			kw='talons'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNombre_de_Talons_de_departAccess().getTalonsKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleRotation
entryRuleRotation returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRotationRule()); }
	iv_ruleRotation=ruleRotation
	{ $current=$iv_ruleRotation.current.getText(); }
	EOF;

// Rule Rotation
ruleRotation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='Sens'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRotationAccess().getSensKeyword_0_0());
			}
			kw='des'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRotationAccess().getDesKeyword_0_1());
			}
			kw='aiguilles'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRotationAccess().getAiguillesKeyword_0_2());
			}
			kw='dune'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRotationAccess().getDuneKeyword_0_3());
			}
			kw='montre'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRotationAccess().getMontreKeyword_0_4());
			}
		)
		    |
		(
			kw='Sens'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRotationAccess().getSensKeyword_1_0());
			}
			kw='contraire'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRotationAccess().getContraireKeyword_1_1());
			}
			kw='des'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRotationAccess().getDesKeyword_1_2());
			}
			kw='aiguilles'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRotationAccess().getAiguillesKeyword_1_3());
			}
			kw='dune'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRotationAccess().getDuneKeyword_1_4());
			}
			kw='montre'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRotationAccess().getMontreKeyword_1_5());
			}
		)
		    |
		(
			kw='Sens'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRotationAccess().getSensKeyword_2_0());
			}
			kw='de'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRotationAccess().getDeKeyword_2_1());
			}
			kw='distribution'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRotationAccess().getDistributionKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleEquipe
entryRuleEquipe returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEquipeRule()); }
	iv_ruleEquipe=ruleEquipe
	{ $current=$iv_ruleEquipe.current.getText(); }
	EOF;

// Rule Equipe
ruleEquipe returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Solo'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEquipeAccess().getSoloKeyword_0());
		}
		    |
		kw='Equipes'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEquipeAccess().getEquipesKeyword_1());
		}
	)
;

// Entry rule entryRuleDeroulement
entryRuleDeroulement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeroulementRule()); }
	iv_ruleDeroulement=ruleDeroulement
	{ $current=$iv_ruleDeroulement.current; }
	EOF;

// Rule Deroulement
ruleDeroulement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDeroulementAccess().getPiocherPiocherParserRuleCall_0_0());
				}
				lv_piocher_0_0=rulePiocher
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeroulementRule());
					}
					set(
						$current,
						"piocher",
						lv_piocher_0_0,
						"org.xtext.example.mydsl.MyUnoDsl.Piocher");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDeroulementAccess().getCartesCartesParserRuleCall_1_0());
				}
				lv_cartes_1_0=ruleCartes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeroulementRule());
					}
					set(
						$current,
						"cartes",
						lv_cartes_1_0,
						"org.xtext.example.mydsl.MyUnoDsl.Cartes");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDeroulementAccess().getPenPenaliteParserRuleCall_2_0());
				}
				lv_pen_2_0=rulePenalite
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeroulementRule());
					}
					add(
						$current,
						"pen",
						lv_pen_2_0,
						"org.xtext.example.mydsl.MyUnoDsl.Penalite");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulePiocher
entryRulePiocher returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPiocherRule()); }
	iv_rulePiocher=rulePiocher
	{ $current=$iv_rulePiocher.current; }
	EOF;

// Rule Piocher
rulePiocher returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPiocherAccess().getNbrNombre_de_carteParserRuleCall_0_0());
				}
				lv_nbr_0_0=ruleNombre_de_carte
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPiocherRule());
					}
					set(
						$current,
						"nbr",
						lv_nbr_0_0,
						"org.xtext.example.mydsl.MyUnoDsl.Nombre_de_carte");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_optp_1_0='Piocher'
					{
						newLeafNode(lv_optp_1_0, grammarAccess.getPiocherAccess().getOptpPiocherKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPiocherRule());
						}
						setWithLastConsumed($current, "optp", lv_optp_1_0, "Piocher");
					}
				)
			)
			otherlv_2='seulement'
			{
				newLeafNode(otherlv_2, grammarAccess.getPiocherAccess().getSeulementKeyword_1_1());
			}
			otherlv_3='si'
			{
				newLeafNode(otherlv_3, grammarAccess.getPiocherAccess().getSiKeyword_1_2());
			}
			otherlv_4='on'
			{
				newLeafNode(otherlv_4, grammarAccess.getPiocherAccess().getOnKeyword_1_3());
			}
			otherlv_5='ne'
			{
				newLeafNode(otherlv_5, grammarAccess.getPiocherAccess().getNeKeyword_1_4());
			}
			otherlv_6='peut'
			{
				newLeafNode(otherlv_6, grammarAccess.getPiocherAccess().getPeutKeyword_1_5());
			}
			otherlv_7='pas'
			{
				newLeafNode(otherlv_7, grammarAccess.getPiocherAccess().getPasKeyword_1_6());
			}
			otherlv_8='jouer'
			{
				newLeafNode(otherlv_8, grammarAccess.getPiocherAccess().getJouerKeyword_1_7());
			}
		)?
	)
;

// Entry rule entryRuleNombre_de_carte
entryRuleNombre_de_carte returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNombre_de_carteRule()); }
	iv_ruleNombre_de_carte=ruleNombre_de_carte
	{ $current=$iv_ruleNombre_de_carte.current.getText(); }
	EOF;

// Rule Nombre_de_carte
ruleNombre_de_carte returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='1'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNombre_de_carteAccess().getDigitOneKeyword_0_0());
			}
			kw='carte'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNombre_de_carteAccess().getCarteKeyword_0_1());
			}
		)
		    |
		(
			kw='jusqu\u00E0'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNombre_de_carteAccess().getJusquKeyword_1_0());
			}
			kw='3'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNombre_de_carteAccess().getDigitThreeKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleCartes
entryRuleCartes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCartesRule()); }
	iv_ruleCartes=ruleCartes
	{ $current=$iv_ruleCartes.current; }
	EOF;

// Rule Cartes
ruleCartes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCartesAccess().getCcCumul_CartesParserRuleCall_0_0());
				}
				lv_cc_0_0=ruleCumul_Cartes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCartesRule());
					}
					set(
						$current,
						"cc",
						lv_cc_0_0,
						"org.xtext.example.mydsl.MyUnoDsl.Cumul_Cartes");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getCartesAccess().getJpcJouer_plusieurs_cartesParserRuleCall_1_0());
				}
				lv_jpc_1_0=ruleJouer_plusieurs_cartes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCartesRule());
					}
					set(
						$current,
						"jpc",
						lv_jpc_1_0,
						"org.xtext.example.mydsl.MyUnoDsl.Jouer_plusieurs_cartes");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getCartesAccess().getCljCouper_le_jeuParserRuleCall_2_0());
				}
				lv_clj_2_0=ruleCouper_le_jeu
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCartesRule());
					}
					set(
						$current,
						"clj",
						lv_clj_2_0,
						"org.xtext.example.mydsl.MyUnoDsl.Couper_le_jeu");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getCartesAccess().getCdmChanger_de_mainsParserRuleCall_3_0());
				}
				lv_cdm_3_0=ruleChanger_de_mains
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCartesRule());
					}
					set(
						$current,
						"cdm",
						lv_cdm_3_0,
						"org.xtext.example.mydsl.MyUnoDsl.Changer_de_mains");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getCartesAccess().getP4Plus4ParserRuleCall_4_0());
				}
				lv_p4_4_0=rulePlus4
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCartesRule());
					}
					set(
						$current,
						"p4",
						lv_p4_4_0,
						"org.xtext.example.mydsl.MyUnoDsl.Plus4");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCumul_Cartes
entryRuleCumul_Cartes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCumul_CartesRule()); }
	iv_ruleCumul_Cartes=ruleCumul_Cartes
	{ $current=$iv_ruleCumul_Cartes.current; }
	EOF;

// Rule Cumul_Cartes
ruleCumul_Cartes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_eff_0_0='effet'
				{
					newLeafNode(lv_eff_0_0, grammarAccess.getCumul_CartesAccess().getEffEffetKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCumul_CartesRule());
					}
					setWithLastConsumed($current, "eff", lv_eff_0_0, "effet");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getCumul_CartesAccess().getCcpCumul_cartes_plusParserRuleCall_1_0());
				}
				lv_ccp_1_0=ruleCumul_cartes_plus
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCumul_CartesRule());
					}
					set(
						$current,
						"ccp",
						lv_ccp_1_0,
						"org.xtext.example.mydsl.MyUnoDsl.Cumul_cartes_plus");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleCumul_cartes_plus
entryRuleCumul_cartes_plus returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCumul_cartes_plusRule()); }
	iv_ruleCumul_cartes_plus=ruleCumul_cartes_plus
	{ $current=$iv_ruleCumul_cartes_plus.current.getText(); }
	EOF;

// Rule Cumul_cartes_plus
ruleCumul_cartes_plus returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='Plus2'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCumul_cartes_plusAccess().getPlus2Keyword_0());
			}
		)?
		(
			kw='Plus4'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCumul_cartes_plusAccess().getPlus4Keyword_1());
			}
		)?
	)
;

// Entry rule entryRuleJouer_plusieurs_cartes
entryRuleJouer_plusieurs_cartes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJouer_plusieurs_cartesRule()); }
	iv_ruleJouer_plusieurs_cartes=ruleJouer_plusieurs_cartes
	{ $current=$iv_ruleJouer_plusieurs_cartes.current; }
	EOF;

// Rule Jouer_plusieurs_cartes
ruleJouer_plusieurs_cartes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getJouer_plusieurs_cartesAccess().getSSuitesParserRuleCall_0_0());
				}
				lv_s_0_0=ruleSuites
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJouer_plusieurs_cartesRule());
					}
					set(
						$current,
						"s",
						lv_s_0_0,
						"org.xtext.example.mydsl.MyUnoDsl.Suites");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_1='couleur'
			{
				newLeafNode(otherlv_1, grammarAccess.getJouer_plusieurs_cartesAccess().getCouleurKeyword_1());
			}
		)?
		(
			otherlv_2='nombre'
			{
				newLeafNode(otherlv_2, grammarAccess.getJouer_plusieurs_cartesAccess().getNombreKeyword_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getJouer_plusieurs_cartesAccess().getCusCartes_Uno_SpecialesParserRuleCall_3_0());
				}
				lv_cus_3_0=rulecartes_Uno_Speciales
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJouer_plusieurs_cartesRule());
					}
					set(
						$current,
						"cus",
						lv_cus_3_0,
						"org.xtext.example.mydsl.MyUnoDsl.cartes_Uno_Speciales");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleSuites
entryRuleSuites returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSuitesRule()); }
	iv_ruleSuites=ruleSuites
	{ $current=$iv_ruleSuites.current; }
	EOF;

// Rule Suites
ruleSuites returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Suite'
		{
			newLeafNode(otherlv_0, grammarAccess.getSuitesAccess().getSuiteKeyword_0());
		}
		(
			(
				lv_sr_1_0='suite_royale'
				{
					newLeafNode(lv_sr_1_0, grammarAccess.getSuitesAccess().getSrSuite_royaleKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSuitesRule());
					}
					setWithLastConsumed($current, "sr", lv_sr_1_0, "suite_royale");
				}
			)
		)?
	)
;

// Entry rule entryRulecartes_Uno_Speciales
entryRulecartes_Uno_Speciales returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCartes_Uno_SpecialesRule()); }
	iv_rulecartes_Uno_Speciales=rulecartes_Uno_Speciales
	{ $current=$iv_rulecartes_Uno_Speciales.current.getText(); }
	EOF;

// Rule cartes_Uno_Speciales
rulecartes_Uno_Speciales returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='cartes'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCartes_Uno_SpecialesAccess().getCartesKeyword_0());
		}
		kw='Uno'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCartes_Uno_SpecialesAccess().getUnoKeyword_1());
		}
		kw='speciales'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCartes_Uno_SpecialesAccess().getSpecialesKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getCartes_Uno_SpecialesAccess().getPlusParserRuleCall_3());
		}
		this_Plus_3=rulePlus
		{
			$current.merge(this_Plus_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePlus
entryRulePlus returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPlusRule()); }
	iv_rulePlus=rulePlus
	{ $current=$iv_rulePlus.current.getText(); }
	EOF;

// Rule Plus
rulePlus returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='plus'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlusAccess().getPlusKeyword_0_0());
			}
			kw='2'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlusAccess().getDigitTwoKeyword_0_1());
			}
		)?
		(
			kw='plus'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlusAccess().getPlusKeyword_1_0());
			}
			kw='4'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlusAccess().getDigitFourKeyword_1_1());
			}
		)?
	)
;

// Entry rule entryRuleCouper_le_jeu
entryRuleCouper_le_jeu returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCouper_le_jeuRule()); }
	iv_ruleCouper_le_jeu=ruleCouper_le_jeu
	{ $current=$iv_ruleCouper_le_jeu.current.getText(); }
	EOF;

// Rule Couper_le_jeu
ruleCouper_le_jeu returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCouper_le_jeuAccess().getMeme_nombreParserRuleCall());
		}
		this_Meme_nombre_0=ruleMeme_nombre
		{
			$current.merge(this_Meme_nombre_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)?
;

// Entry rule entryRuleMeme_nombre
entryRuleMeme_nombre returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMeme_nombreRule()); }
	iv_ruleMeme_nombre=ruleMeme_nombre
	{ $current=$iv_ruleMeme_nombre.current.getText(); }
	EOF;

// Rule Meme_nombre
ruleMeme_nombre returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='meme'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getMeme_nombreAccess().getMemeKeyword_0_0());
			}
			kw='nombre'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getMeme_nombreAccess().getNombreKeyword_0_1());
			}
		)?
		(
			kw='meme'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getMeme_nombreAccess().getMemeKeyword_1_0());
			}
			kw='carte'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getMeme_nombreAccess().getCarteKeyword_1_1());
			}
		)?
	)
;

// Entry rule entryRuleChanger_de_mains
entryRuleChanger_de_mains returns [String current=null]:
	{ newCompositeNode(grammarAccess.getChanger_de_mainsRule()); }
	iv_ruleChanger_de_mains=ruleChanger_de_mains
	{ $current=$iv_ruleChanger_de_mains.current.getText(); }
	EOF;

// Rule Changer_de_mains
ruleChanger_de_mains returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getChanger_de_mainsAccess().getSeven_0ParserRuleCall());
	}
	this_Seven_0_0=ruleSeven_0
	{
		$current.merge(this_Seven_0_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleSeven_0
entryRuleSeven_0 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSeven_0Rule()); }
	iv_ruleSeven_0=ruleSeven_0
	{ $current=$iv_ruleSeven_0.current.getText(); }
	EOF;

// Rule Seven_0
ruleSeven_0 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='Sept'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSeven_0Access().getSeptKeyword_0());
			}
		)?
		(
			kw='Zero'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSeven_0Access().getZeroKeyword_1());
			}
		)?
	)
;

// Entry rule entryRulePlus4
entryRulePlus4 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPlus4Rule()); }
	iv_rulePlus4=rulePlus4
	{ $current=$iv_rulePlus4.current.getText(); }
	EOF;

// Rule Plus4
rulePlus4 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='+4'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlus4Access().getPlusSignDigitFourKeyword_0_0());
			}
			kw='seulement'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlus4Access().getSeulementKeyword_0_1());
			}
			kw='si'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlus4Access().getSiKeyword_0_2());
			}
			kw='rien'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlus4Access().getRienKeyword_0_3());
			}
			kw='dautre'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlus4Access().getDautreKeyword_0_4());
			}
		)?
		(
			kw='Interdit'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlus4Access().getInterditKeyword_1_0());
			}
			kw='de'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlus4Access().getDeKeyword_1_1());
			}
			kw='finir'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlus4Access().getFinirKeyword_1_2());
			}
			kw='avec'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlus4Access().getAvecKeyword_1_3());
			}
			kw='un'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlus4Access().getUnKeyword_1_4());
			}
			kw='+4'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlus4Access().getPlusSignDigitFourKeyword_1_5());
			}
		)?
	)
;

// Entry rule entryRulePenalite
entryRulePenalite returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPenaliteRule()); }
	iv_rulePenalite=rulePenalite
	{ $current=$iv_rulePenalite.current; }
	EOF;

// Rule Penalite
rulePenalite returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='commentaire'
			{
				newLeafNode(otherlv_0, grammarAccess.getPenaliteAccess().getCommentaireKeyword_0_0());
			}
			otherlv_1='intempestif'
			{
				newLeafNode(otherlv_1, grammarAccess.getPenaliteAccess().getIntempestifKeyword_0_1());
			}
		)?
		{
			newCompositeNode(grammarAccess.getPenaliteAccess().getContestationsParserRuleCall_1());
		}
		ruleContestations
		{
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_3='Tribunal'
			{
				newLeafNode(otherlv_3, grammarAccess.getPenaliteAccess().getTribunalKeyword_2_0());
			}
			otherlv_4='Populaire'
			{
				newLeafNode(otherlv_4, grammarAccess.getPenaliteAccess().getPopulaireKeyword_2_1());
			}
			otherlv_5='si'
			{
				newLeafNode(otherlv_5, grammarAccess.getPenaliteAccess().getSiKeyword_2_2());
			}
			otherlv_6='litige'
			{
				newLeafNode(otherlv_6, grammarAccess.getPenaliteAccess().getLitigeKeyword_2_3());
			}
		)?
		(
			otherlv_7='Limite'
			{
				newLeafNode(otherlv_7, grammarAccess.getPenaliteAccess().getLimiteKeyword_3_0());
			}
			otherlv_8='de'
			{
				newLeafNode(otherlv_8, grammarAccess.getPenaliteAccess().getDeKeyword_3_1());
			}
			otherlv_9='temps'
			{
				newLeafNode(otherlv_9, grammarAccess.getPenaliteAccess().getTempsKeyword_3_2());
			}
		)?
		(
			(
				lv_penalite_10_0=RULE_STRING
				{
					newLeafNode(lv_penalite_10_0, grammarAccess.getPenaliteAccess().getPenaliteSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPenaliteRule());
					}
					setWithLastConsumed(
						$current,
						"penalite",
						lv_penalite_10_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
	)
;

// Entry rule entryRuleContestations
entryRuleContestations returns [String current=null]:
	{ newCompositeNode(grammarAccess.getContestationsRule()); }
	iv_ruleContestations=ruleContestations
	{ $current=$iv_ruleContestations.current.getText(); }
	EOF;

// Rule Contestations
ruleContestations returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='plus'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getContestationsAccess().getPlusKeyword_0_0());
			}
			kw='4'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getContestationsAccess().getDigitFourKeyword_0_1());
			}
		)?
		(
			kw='se'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getContestationsAccess().getSeKeyword_1_0());
			}
			kw='tromper'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getContestationsAccess().getTromperKeyword_1_1());
			}
		)?
	)
;

// Entry rule entryRuleFin
entryRuleFin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFinRule()); }
	iv_ruleFin=ruleFin
	{ $current=$iv_ruleFin.current; }
	EOF;

// Rule Fin
ruleFin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFinAccess().getFdmFin_de_mancheParserRuleCall_0_0());
				}
				lv_fdm_0_0=ruleFin_de_manche
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFinRule());
					}
					set(
						$current,
						"fdm",
						lv_fdm_0_0,
						"org.xtext.example.mydsl.MyUnoDsl.Fin_de_manche");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFinAccess().getFdpFin_de_partieParserRuleCall_1_0());
				}
				lv_fdp_1_0=ruleFin_de_partie
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFinRule());
					}
					set(
						$current,
						"fdp",
						lv_fdp_1_0,
						"org.xtext.example.mydsl.MyUnoDsl.Fin_de_partie");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFin_de_manche
entryRuleFin_de_manche returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFin_de_mancheRule()); }
	iv_ruleFin_de_manche=ruleFin_de_manche
	{ $current=$iv_ruleFin_de_manche.current.getText(); }
	EOF;

// Rule Fin_de_manche
ruleFin_de_manche returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Dire'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFin_de_mancheAccess().getDireKeyword_0());
		}
		kw='Uno'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFin_de_mancheAccess().getUnoKeyword_1());
		}
	)
;

// Entry rule entryRuleFin_de_partie
entryRuleFin_de_partie returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFin_de_partieRule()); }
	iv_ruleFin_de_partie=ruleFin_de_partie
	{ $current=$iv_ruleFin_de_partie.current.getText(); }
	EOF;

// Rule Fin_de_partie
ruleFin_de_partie returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getFin_de_partieAccess().getVainqueurParserRuleCall());
	}
	this_Vainqueur_0=ruleVainqueur
	{
		$current.merge(this_Vainqueur_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleVainqueur
entryRuleVainqueur returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVainqueurRule()); }
	iv_ruleVainqueur=ruleVainqueur
	{ $current=$iv_ruleVainqueur.current.getText(); }
	EOF;

// Rule Vainqueur
ruleVainqueur returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='nombre'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getVainqueurAccess().getNombreKeyword_0_0());
			}
			kw='de'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getVainqueurAccess().getDeKeyword_0_1());
			}
			kw='manches'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getVainqueurAccess().getManchesKeyword_0_2());
			}
			kw='gagn\u00E9es'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getVainqueurAccess().getGagnEsKeyword_0_3());
			}
		)
		    |
		(
			kw='moins'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getVainqueurAccess().getMoinsKeyword_1_0());
			}
			kw='de'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getVainqueurAccess().getDeKeyword_1_1());
			}
			kw='points'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getVainqueurAccess().getPointsKeyword_1_2());
			}
		)
		    |
		(
			kw='dernier'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getVainqueurAccess().getDernierKeyword_2_0());
			}
			kw=':'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getVainqueurAccess().getColonKeyword_2_1());
			}
			kw='battle'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getVainqueurAccess().getBattleKeyword_2_2());
			}
			kw='royale'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getVainqueurAccess().getRoyaleKeyword_2_3());
			}
		)
		    |
		(
			kw='plus'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getVainqueurAccess().getPlusKeyword_3_0());
			}
			kw='de'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getVainqueurAccess().getDeKeyword_3_1());
			}
			kw='points'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getVainqueurAccess().getPointsKeyword_3_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
