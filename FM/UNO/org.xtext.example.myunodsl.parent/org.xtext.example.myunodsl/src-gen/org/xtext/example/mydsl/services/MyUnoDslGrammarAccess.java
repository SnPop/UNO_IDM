/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyUnoDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnoConfigurationParserRuleCall_0_0 = (RuleCall)cUnoAssignment_0.eContents().get(0);
		private final Assignment cDeroulementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeroulementDeroulementParserRuleCall_1_0 = (RuleCall)cDeroulementAssignment_1.eContents().get(0);
		private final Assignment cFinAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFinFinParserRuleCall_2_0 = (RuleCall)cFinAssignment_2.eContents().get(0);
		
		//Model:
		//	uno=Configuration deroulement=Deroulement? fin=Fin;
		@Override public ParserRule getRule() { return rule; }
		
		//uno=Configuration deroulement=Deroulement? fin=Fin
		public Group getGroup() { return cGroup; }
		
		//uno=Configuration
		public Assignment getUnoAssignment_0() { return cUnoAssignment_0; }
		
		//Configuration
		public RuleCall getUnoConfigurationParserRuleCall_0_0() { return cUnoConfigurationParserRuleCall_0_0; }
		
		//deroulement=Deroulement?
		public Assignment getDeroulementAssignment_1() { return cDeroulementAssignment_1; }
		
		//Deroulement
		public RuleCall getDeroulementDeroulementParserRuleCall_1_0() { return cDeroulementDeroulementParserRuleCall_1_0; }
		
		//fin=Fin
		public Assignment getFinAssignment_2() { return cFinAssignment_2; }
		
		//Fin
		public RuleCall getFinFinParserRuleCall_2_0() { return cFinFinParserRuleCall_2_0; }
	}
	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMainParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNbtAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNbtNombre_de_Talons_de_departParserRuleCall_1_0 = (RuleCall)cNbtAssignment_1.eContents().get(0);
		private final Assignment cRotAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRotRotationParserRuleCall_2_0 = (RuleCall)cRotAssignment_2.eContents().get(0);
		private final Assignment cEquAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEquEquipeParserRuleCall_3_0 = (RuleCall)cEquAssignment_3.eContents().get(0);
		
		//Configuration:
		//	Main nbt=Nombre_de_Talons_de_depart rot=Rotation equ=Equipe;
		@Override public ParserRule getRule() { return rule; }
		
		//Main nbt=Nombre_de_Talons_de_depart rot=Rotation equ=Equipe
		public Group getGroup() { return cGroup; }
		
		//Main
		public RuleCall getMainParserRuleCall_0() { return cMainParserRuleCall_0; }
		
		//nbt=Nombre_de_Talons_de_depart
		public Assignment getNbtAssignment_1() { return cNbtAssignment_1; }
		
		//Nombre_de_Talons_de_depart
		public RuleCall getNbtNombre_de_Talons_de_departParserRuleCall_1_0() { return cNbtNombre_de_Talons_de_departParserRuleCall_1_0; }
		
		//rot=Rotation
		public Assignment getRotAssignment_2() { return cRotAssignment_2; }
		
		//Rotation
		public RuleCall getRotRotationParserRuleCall_2_0() { return cRotRotationParserRuleCall_2_0; }
		
		//equ=Equipe
		public Assignment getEquAssignment_3() { return cEquAssignment_3; }
		
		//Equipe
		public RuleCall getEquEquipeParserRuleCall_3_0() { return cEquEquipeParserRuleCall_3_0; }
	}
	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibiliteAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibiliteVisibiliteParserRuleCall_0_0 = (RuleCall)cVisibiliteAssignment_0.eContents().get(0);
		private final Assignment cNbmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNbmNombre_de_mains_de_departParserRuleCall_1_0 = (RuleCall)cNbmAssignment_1.eContents().get(0);
		private final Assignment cNbcAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNbcNombre_de_cartes_de_departParserRuleCall_2_0 = (RuleCall)cNbcAssignment_2.eContents().get(0);
		
		//Main:
		//	visibilite=Visibilite nbm=Nombre_de_mains_de_depart nbc=Nombre_de_cartes_de_depart;
		@Override public ParserRule getRule() { return rule; }
		
		//visibilite=Visibilite nbm=Nombre_de_mains_de_depart nbc=Nombre_de_cartes_de_depart
		public Group getGroup() { return cGroup; }
		
		//visibilite=Visibilite
		public Assignment getVisibiliteAssignment_0() { return cVisibiliteAssignment_0; }
		
		//Visibilite
		public RuleCall getVisibiliteVisibiliteParserRuleCall_0_0() { return cVisibiliteVisibiliteParserRuleCall_0_0; }
		
		//nbm=Nombre_de_mains_de_depart
		public Assignment getNbmAssignment_1() { return cNbmAssignment_1; }
		
		//Nombre_de_mains_de_depart
		public RuleCall getNbmNombre_de_mains_de_departParserRuleCall_1_0() { return cNbmNombre_de_mains_de_departParserRuleCall_1_0; }
		
		//nbc=Nombre_de_cartes_de_depart
		public Assignment getNbcAssignment_2() { return cNbcAssignment_2; }
		
		//Nombre_de_cartes_de_depart
		public RuleCall getNbcNombre_de_cartes_de_departParserRuleCall_2_0() { return cNbcNombre_de_cartes_de_departParserRuleCall_2_0; }
	}
	public class VisibiliteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Visibilite");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVisibleKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCachEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Visibilite:
		//	"Visible"
		//	| "Cachée";
		@Override public ParserRule getRule() { return rule; }
		
		//"Visible" | "Cachée"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"Visible"
		public Keyword getVisibleKeyword_0() { return cVisibleKeyword_0; }
		
		//"Cachée"
		public Keyword getCachEKeyword_1() { return cCachEKeyword_1; }
	}
	public class Nombre_de_mains_de_departElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Nombre_de_mains_de_depart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cDigitOneKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cMainKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cPlusieursKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cMainsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Nombre_de_mains_de_depart:
		//	"1" "main"
		//	| "Plusieurs" "mains";
		@Override public ParserRule getRule() { return rule; }
		
		//"1" "main" | "Plusieurs" "mains"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"1" "main"
		public Group getGroup_0() { return cGroup_0; }
		
		//"1"
		public Keyword getDigitOneKeyword_0_0() { return cDigitOneKeyword_0_0; }
		
		//"main"
		public Keyword getMainKeyword_0_1() { return cMainKeyword_0_1; }
		
		//"Plusieurs" "mains"
		public Group getGroup_1() { return cGroup_1; }
		
		//"Plusieurs"
		public Keyword getPlusieursKeyword_1_0() { return cPlusieursKeyword_1_0; }
		
		//"mains"
		public Keyword getMainsKeyword_1_1() { return cMainsKeyword_1_1; }
	}
	public class Nombre_de_cartes_de_departElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Nombre_de_cartes_de_depart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cDigitSevenKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cCartesKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDigitFourKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cCartesKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cDigitSevenHyphenMinusDigitOneDigitFiveKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cCartesKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Nombre_de_cartes_de_depart:
		//	"7" "cartes"
		//	| "4" "cartes"
		//	| "7-15" "cartes";
		@Override public ParserRule getRule() { return rule; }
		
		//"7" "cartes" | "4" "cartes" | "7-15" "cartes"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"7" "cartes"
		public Group getGroup_0() { return cGroup_0; }
		
		//"7"
		public Keyword getDigitSevenKeyword_0_0() { return cDigitSevenKeyword_0_0; }
		
		//"cartes"
		public Keyword getCartesKeyword_0_1() { return cCartesKeyword_0_1; }
		
		//"4" "cartes"
		public Group getGroup_1() { return cGroup_1; }
		
		//"4"
		public Keyword getDigitFourKeyword_1_0() { return cDigitFourKeyword_1_0; }
		
		//"cartes"
		public Keyword getCartesKeyword_1_1() { return cCartesKeyword_1_1; }
		
		//"7-15" "cartes"
		public Group getGroup_2() { return cGroup_2; }
		
		//"7-15"
		public Keyword getDigitSevenHyphenMinusDigitOneDigitFiveKeyword_2_0() { return cDigitSevenHyphenMinusDigitOneDigitFiveKeyword_2_0; }
		
		//"cartes"
		public Keyword getCartesKeyword_2_1() { return cCartesKeyword_2_1; }
	}
	public class Nombre_de_Talons_de_departElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Nombre_de_Talons_de_depart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cDigitOneKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cTalonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDigitThreeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cTalonsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Nombre_de_Talons_de_depart:
		//	"1" "talon"
		//	| "3" "talons";
		@Override public ParserRule getRule() { return rule; }
		
		//"1" "talon" | "3" "talons"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"1" "talon"
		public Group getGroup_0() { return cGroup_0; }
		
		//"1"
		public Keyword getDigitOneKeyword_0_0() { return cDigitOneKeyword_0_0; }
		
		//"talon"
		public Keyword getTalonKeyword_0_1() { return cTalonKeyword_0_1; }
		
		//"3" "talons"
		public Group getGroup_1() { return cGroup_1; }
		
		//"3"
		public Keyword getDigitThreeKeyword_1_0() { return cDigitThreeKeyword_1_0; }
		
		//"talons"
		public Keyword getTalonsKeyword_1_1() { return cTalonsKeyword_1_1; }
	}
	public class RotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Rotation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSensKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cDesKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cAiguillesKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cDuneKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cMontreKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSensKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cContraireKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cDesKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cAiguillesKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cDuneKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cMontreKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cSensKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cDeKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cDistributionKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Rotation:
		//	"Sens" "des" "aiguilles" "dune" "montre"
		//	| "Sens" "contraire" "des" "aiguilles" "dune" "montre"
		//	| "Sens" "de" "distribution";
		@Override public ParserRule getRule() { return rule; }
		
		//"Sens" "des" "aiguilles" "dune" "montre" | "Sens" "contraire" "des" "aiguilles" "dune" "montre" | "Sens" "de"
		//"distribution"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"Sens" "des" "aiguilles" "dune" "montre"
		public Group getGroup_0() { return cGroup_0; }
		
		//"Sens"
		public Keyword getSensKeyword_0_0() { return cSensKeyword_0_0; }
		
		//"des"
		public Keyword getDesKeyword_0_1() { return cDesKeyword_0_1; }
		
		//"aiguilles"
		public Keyword getAiguillesKeyword_0_2() { return cAiguillesKeyword_0_2; }
		
		//"dune"
		public Keyword getDuneKeyword_0_3() { return cDuneKeyword_0_3; }
		
		//"montre"
		public Keyword getMontreKeyword_0_4() { return cMontreKeyword_0_4; }
		
		//"Sens" "contraire" "des" "aiguilles" "dune" "montre"
		public Group getGroup_1() { return cGroup_1; }
		
		//"Sens"
		public Keyword getSensKeyword_1_0() { return cSensKeyword_1_0; }
		
		//"contraire"
		public Keyword getContraireKeyword_1_1() { return cContraireKeyword_1_1; }
		
		//"des"
		public Keyword getDesKeyword_1_2() { return cDesKeyword_1_2; }
		
		//"aiguilles"
		public Keyword getAiguillesKeyword_1_3() { return cAiguillesKeyword_1_3; }
		
		//"dune"
		public Keyword getDuneKeyword_1_4() { return cDuneKeyword_1_4; }
		
		//"montre"
		public Keyword getMontreKeyword_1_5() { return cMontreKeyword_1_5; }
		
		//"Sens" "de" "distribution"
		public Group getGroup_2() { return cGroup_2; }
		
		//"Sens"
		public Keyword getSensKeyword_2_0() { return cSensKeyword_2_0; }
		
		//"de"
		public Keyword getDeKeyword_2_1() { return cDeKeyword_2_1; }
		
		//"distribution"
		public Keyword getDistributionKeyword_2_2() { return cDistributionKeyword_2_2; }
	}
	public class EquipeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Equipe");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSoloKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEquipesKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Equipe:
		//	"Solo"
		//	| "Equipes";
		@Override public ParserRule getRule() { return rule; }
		
		//"Solo" | "Equipes"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"Solo"
		public Keyword getSoloKeyword_0() { return cSoloKeyword_0; }
		
		//"Equipes"
		public Keyword getEquipesKeyword_1() { return cEquipesKeyword_1; }
	}
	public class DeroulementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Deroulement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPiocherAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPiocherPiocherParserRuleCall_0_0 = (RuleCall)cPiocherAssignment_0.eContents().get(0);
		private final Assignment cCartesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCartesCartesParserRuleCall_1_0 = (RuleCall)cCartesAssignment_1.eContents().get(0);
		private final Assignment cPenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPenPenaliteParserRuleCall_2_0 = (RuleCall)cPenAssignment_2.eContents().get(0);
		
		//Deroulement:
		//	piocher=Piocher cartes=Cartes pen+=Penalite?;
		@Override public ParserRule getRule() { return rule; }
		
		//piocher=Piocher cartes=Cartes pen+=Penalite?
		public Group getGroup() { return cGroup; }
		
		//piocher=Piocher
		public Assignment getPiocherAssignment_0() { return cPiocherAssignment_0; }
		
		//Piocher
		public RuleCall getPiocherPiocherParserRuleCall_0_0() { return cPiocherPiocherParserRuleCall_0_0; }
		
		//cartes=Cartes
		public Assignment getCartesAssignment_1() { return cCartesAssignment_1; }
		
		//Cartes
		public RuleCall getCartesCartesParserRuleCall_1_0() { return cCartesCartesParserRuleCall_1_0; }
		
		//pen+=Penalite?
		public Assignment getPenAssignment_2() { return cPenAssignment_2; }
		
		//Penalite
		public RuleCall getPenPenaliteParserRuleCall_2_0() { return cPenPenaliteParserRuleCall_2_0; }
	}
	public class PiocherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Piocher");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNbrAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNbrNombre_de_carteParserRuleCall_0_0 = (RuleCall)cNbrAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOptpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOptpPiocherKeyword_1_0_0 = (Keyword)cOptpAssignment_1_0.eContents().get(0);
		private final Keyword cSeulementKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cSiKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cOnKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cNeKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cPeutKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cPasKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Keyword cJouerKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		
		//Piocher:
		//	nbr=Nombre_de_carte (optp="Piocher" "seulement" "si" "on" "ne" "peut" "pas" "jouer")?;
		@Override public ParserRule getRule() { return rule; }
		
		//nbr=Nombre_de_carte (optp="Piocher" "seulement" "si" "on" "ne" "peut" "pas" "jouer")?
		public Group getGroup() { return cGroup; }
		
		//nbr=Nombre_de_carte
		public Assignment getNbrAssignment_0() { return cNbrAssignment_0; }
		
		//Nombre_de_carte
		public RuleCall getNbrNombre_de_carteParserRuleCall_0_0() { return cNbrNombre_de_carteParserRuleCall_0_0; }
		
		//(optp="Piocher" "seulement" "si" "on" "ne" "peut" "pas" "jouer")?
		public Group getGroup_1() { return cGroup_1; }
		
		//optp="Piocher"
		public Assignment getOptpAssignment_1_0() { return cOptpAssignment_1_0; }
		
		//"Piocher"
		public Keyword getOptpPiocherKeyword_1_0_0() { return cOptpPiocherKeyword_1_0_0; }
		
		//"seulement"
		public Keyword getSeulementKeyword_1_1() { return cSeulementKeyword_1_1; }
		
		//"si"
		public Keyword getSiKeyword_1_2() { return cSiKeyword_1_2; }
		
		//"on"
		public Keyword getOnKeyword_1_3() { return cOnKeyword_1_3; }
		
		//"ne"
		public Keyword getNeKeyword_1_4() { return cNeKeyword_1_4; }
		
		//"peut"
		public Keyword getPeutKeyword_1_5() { return cPeutKeyword_1_5; }
		
		//"pas"
		public Keyword getPasKeyword_1_6() { return cPasKeyword_1_6; }
		
		//"jouer"
		public Keyword getJouerKeyword_1_7() { return cJouerKeyword_1_7; }
	}
	public class Nombre_de_carteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Nombre_de_carte");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cDigitOneKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cCarteKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cJusquKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cDigitThreeKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Nombre_de_carte:
		//	"1" "carte"
		//	| "jusquà" "3";
		@Override public ParserRule getRule() { return rule; }
		
		//"1" "carte" | "jusquà" "3"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"1" "carte"
		public Group getGroup_0() { return cGroup_0; }
		
		//"1"
		public Keyword getDigitOneKeyword_0_0() { return cDigitOneKeyword_0_0; }
		
		//"carte"
		public Keyword getCarteKeyword_0_1() { return cCarteKeyword_0_1; }
		
		//"jusquà" "3"
		public Group getGroup_1() { return cGroup_1; }
		
		//"jusquà"
		public Keyword getJusquKeyword_1_0() { return cJusquKeyword_1_0; }
		
		//"3"
		public Keyword getDigitThreeKeyword_1_1() { return cDigitThreeKeyword_1_1; }
	}
	public class CartesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Cartes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCcAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCcCumul_CartesParserRuleCall_0_0 = (RuleCall)cCcAssignment_0.eContents().get(0);
		private final Assignment cJpcAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJpcJouer_plusieurs_cartesParserRuleCall_1_0 = (RuleCall)cJpcAssignment_1.eContents().get(0);
		private final Assignment cCljAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCljCouper_le_jeuParserRuleCall_2_0 = (RuleCall)cCljAssignment_2.eContents().get(0);
		private final Assignment cCdmAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCdmChanger_de_mainsParserRuleCall_3_0 = (RuleCall)cCdmAssignment_3.eContents().get(0);
		private final Assignment cP4Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cP4Plus4ParserRuleCall_4_0 = (RuleCall)cP4Assignment_4.eContents().get(0);
		
		//Cartes:
		//	cc=Cumul_Cartes? jpc=Jouer_plusieurs_cartes? clj=Couper_le_jeu? cdm=Changer_de_mains? p4=Plus4;
		@Override public ParserRule getRule() { return rule; }
		
		//cc=Cumul_Cartes? jpc=Jouer_plusieurs_cartes? clj=Couper_le_jeu? cdm=Changer_de_mains? p4=Plus4
		public Group getGroup() { return cGroup; }
		
		//cc=Cumul_Cartes?
		public Assignment getCcAssignment_0() { return cCcAssignment_0; }
		
		//Cumul_Cartes
		public RuleCall getCcCumul_CartesParserRuleCall_0_0() { return cCcCumul_CartesParserRuleCall_0_0; }
		
		//jpc=Jouer_plusieurs_cartes?
		public Assignment getJpcAssignment_1() { return cJpcAssignment_1; }
		
		//Jouer_plusieurs_cartes
		public RuleCall getJpcJouer_plusieurs_cartesParserRuleCall_1_0() { return cJpcJouer_plusieurs_cartesParserRuleCall_1_0; }
		
		//clj=Couper_le_jeu?
		public Assignment getCljAssignment_2() { return cCljAssignment_2; }
		
		//Couper_le_jeu
		public RuleCall getCljCouper_le_jeuParserRuleCall_2_0() { return cCljCouper_le_jeuParserRuleCall_2_0; }
		
		//cdm=Changer_de_mains?
		public Assignment getCdmAssignment_3() { return cCdmAssignment_3; }
		
		//Changer_de_mains
		public RuleCall getCdmChanger_de_mainsParserRuleCall_3_0() { return cCdmChanger_de_mainsParserRuleCall_3_0; }
		
		//p4=Plus4
		public Assignment getP4Assignment_4() { return cP4Assignment_4; }
		
		//Plus4
		public RuleCall getP4Plus4ParserRuleCall_4_0() { return cP4Plus4ParserRuleCall_4_0; }
	}
	public class Cumul_CartesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Cumul_Cartes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEffAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cEffEffetKeyword_0_0 = (Keyword)cEffAssignment_0.eContents().get(0);
		private final Assignment cCcpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCcpCumul_cartes_plusParserRuleCall_1_0 = (RuleCall)cCcpAssignment_1.eContents().get(0);
		
		//Cumul_Cartes:
		//	eff="effet"? ccp=Cumul_cartes_plus?;
		@Override public ParserRule getRule() { return rule; }
		
		//eff="effet"? ccp=Cumul_cartes_plus?
		public Group getGroup() { return cGroup; }
		
		//eff="effet"?
		public Assignment getEffAssignment_0() { return cEffAssignment_0; }
		
		//"effet"
		public Keyword getEffEffetKeyword_0_0() { return cEffEffetKeyword_0_0; }
		
		//ccp=Cumul_cartes_plus?
		public Assignment getCcpAssignment_1() { return cCcpAssignment_1; }
		
		//Cumul_cartes_plus
		public RuleCall getCcpCumul_cartes_plusParserRuleCall_1_0() { return cCcpCumul_cartes_plusParserRuleCall_1_0; }
	}
	public class Cumul_cartes_plusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Cumul_cartes_plus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlus2Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPlus4Keyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Cumul_cartes_plus:
		//	"Plus2"? "Plus4"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"Plus2"? "Plus4"?
		public Group getGroup() { return cGroup; }
		
		//"Plus2"?
		public Keyword getPlus2Keyword_0() { return cPlus2Keyword_0; }
		
		//"Plus4"?
		public Keyword getPlus4Keyword_1() { return cPlus4Keyword_1; }
	}
	public class Jouer_plusieurs_cartesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Jouer_plusieurs_cartes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSSuitesParserRuleCall_0_0 = (RuleCall)cSAssignment_0.eContents().get(0);
		private final Keyword cCouleurKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNombreKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCusAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCusCartes_Uno_SpecialesParserRuleCall_3_0 = (RuleCall)cCusAssignment_3.eContents().get(0);
		
		//Jouer_plusieurs_cartes:
		//	s=Suites? "couleur"? "nombre"? cus=cartes_Uno_Speciales?;
		@Override public ParserRule getRule() { return rule; }
		
		//s=Suites? "couleur"? "nombre"? cus=cartes_Uno_Speciales?
		public Group getGroup() { return cGroup; }
		
		//s=Suites?
		public Assignment getSAssignment_0() { return cSAssignment_0; }
		
		//Suites
		public RuleCall getSSuitesParserRuleCall_0_0() { return cSSuitesParserRuleCall_0_0; }
		
		//"couleur"?
		public Keyword getCouleurKeyword_1() { return cCouleurKeyword_1; }
		
		//"nombre"?
		public Keyword getNombreKeyword_2() { return cNombreKeyword_2; }
		
		//cus=cartes_Uno_Speciales?
		public Assignment getCusAssignment_3() { return cCusAssignment_3; }
		
		//cartes_Uno_Speciales
		public RuleCall getCusCartes_Uno_SpecialesParserRuleCall_3_0() { return cCusCartes_Uno_SpecialesParserRuleCall_3_0; }
	}
	public class SuitesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Suites");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSuiteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cSrSuite_royaleKeyword_1_0 = (Keyword)cSrAssignment_1.eContents().get(0);
		
		//Suites:
		//	"Suite" sr="suite_royale"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"Suite" sr="suite_royale"?
		public Group getGroup() { return cGroup; }
		
		//"Suite"
		public Keyword getSuiteKeyword_0() { return cSuiteKeyword_0; }
		
		//sr="suite_royale"?
		public Assignment getSrAssignment_1() { return cSrAssignment_1; }
		
		//"suite_royale"
		public Keyword getSrSuite_royaleKeyword_1_0() { return cSrSuite_royaleKeyword_1_0; }
	}
	public class Cartes_Uno_SpecialesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.cartes_Uno_Speciales");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCartesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cUnoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSpecialesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cPlusParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//cartes_Uno_Speciales:
		//	"cartes" "Uno" "speciales" Plus;
		@Override public ParserRule getRule() { return rule; }
		
		//"cartes" "Uno" "speciales" Plus
		public Group getGroup() { return cGroup; }
		
		//"cartes"
		public Keyword getCartesKeyword_0() { return cCartesKeyword_0; }
		
		//"Uno"
		public Keyword getUnoKeyword_1() { return cUnoKeyword_1; }
		
		//"speciales"
		public Keyword getSpecialesKeyword_2() { return cSpecialesKeyword_2; }
		
		//Plus
		public RuleCall getPlusParserRuleCall_3() { return cPlusParserRuleCall_3; }
	}
	public class PlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Plus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPlusKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cDigitTwoKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPlusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cDigitFourKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Plus:
		//	("plus" "2")? ("plus" "4")?;
		@Override public ParserRule getRule() { return rule; }
		
		//("plus" "2")? ("plus" "4")?
		public Group getGroup() { return cGroup; }
		
		//("plus" "2")?
		public Group getGroup_0() { return cGroup_0; }
		
		//"plus"
		public Keyword getPlusKeyword_0_0() { return cPlusKeyword_0_0; }
		
		//"2"
		public Keyword getDigitTwoKeyword_0_1() { return cDigitTwoKeyword_0_1; }
		
		//("plus" "4")?
		public Group getGroup_1() { return cGroup_1; }
		
		//"plus"
		public Keyword getPlusKeyword_1_0() { return cPlusKeyword_1_0; }
		
		//"4"
		public Keyword getDigitFourKeyword_1_1() { return cDigitFourKeyword_1_1; }
	}
	public class Couper_le_jeuElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Couper_le_jeu");
		private final RuleCall cMeme_nombreParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Couper_le_jeu:
		//	Meme_nombre?;
		@Override public ParserRule getRule() { return rule; }
		
		//Meme_nombre?
		public RuleCall getMeme_nombreParserRuleCall() { return cMeme_nombreParserRuleCall; }
	}
	public class Meme_nombreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Meme_nombre");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cMemeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cNombreKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cMemeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cCarteKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Meme_nombre:
		//	("meme" "nombre")? ("meme" "carte")?;
		@Override public ParserRule getRule() { return rule; }
		
		//("meme" "nombre")? ("meme" "carte")?
		public Group getGroup() { return cGroup; }
		
		//("meme" "nombre")?
		public Group getGroup_0() { return cGroup_0; }
		
		//"meme"
		public Keyword getMemeKeyword_0_0() { return cMemeKeyword_0_0; }
		
		//"nombre"
		public Keyword getNombreKeyword_0_1() { return cNombreKeyword_0_1; }
		
		//("meme" "carte")?
		public Group getGroup_1() { return cGroup_1; }
		
		//"meme"
		public Keyword getMemeKeyword_1_0() { return cMemeKeyword_1_0; }
		
		//"carte"
		public Keyword getCarteKeyword_1_1() { return cCarteKeyword_1_1; }
	}
	public class Changer_de_mainsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Changer_de_mains");
		private final RuleCall cSeven_0ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Changer_de_mains:
		//	Seven_0;
		@Override public ParserRule getRule() { return rule; }
		
		//Seven_0
		public RuleCall getSeven_0ParserRuleCall() { return cSeven_0ParserRuleCall; }
	}
	public class Seven_0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Seven_0");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSeptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cZeroKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Seven_0:
		//	"Sept"? "Zero"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"Sept"? "Zero"?
		public Group getGroup() { return cGroup; }
		
		//"Sept"?
		public Keyword getSeptKeyword_0() { return cSeptKeyword_0; }
		
		//"Zero"?
		public Keyword getZeroKeyword_1() { return cZeroKeyword_1; }
	}
	public class Plus4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Plus4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPlusSignDigitFourKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cSeulementKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cSiKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cRienKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cDautreKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cInterditKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cDeKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cFinirKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cAvecKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cUnKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cPlusSignDigitFourKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//Plus4:
		//	("+4" "seulement" "si" "rien" "dautre")? ("Interdit" "de" "finir" "avec" "un" "+4")?;
		@Override public ParserRule getRule() { return rule; }
		
		//("+4" "seulement" "si" "rien" "dautre")? ("Interdit" "de" "finir" "avec" "un" "+4")?
		public Group getGroup() { return cGroup; }
		
		//("+4" "seulement" "si" "rien" "dautre")?
		public Group getGroup_0() { return cGroup_0; }
		
		//"+4"
		public Keyword getPlusSignDigitFourKeyword_0_0() { return cPlusSignDigitFourKeyword_0_0; }
		
		//"seulement"
		public Keyword getSeulementKeyword_0_1() { return cSeulementKeyword_0_1; }
		
		//"si"
		public Keyword getSiKeyword_0_2() { return cSiKeyword_0_2; }
		
		//"rien"
		public Keyword getRienKeyword_0_3() { return cRienKeyword_0_3; }
		
		//"dautre"
		public Keyword getDautreKeyword_0_4() { return cDautreKeyword_0_4; }
		
		//("Interdit" "de" "finir" "avec" "un" "+4")?
		public Group getGroup_1() { return cGroup_1; }
		
		//"Interdit"
		public Keyword getInterditKeyword_1_0() { return cInterditKeyword_1_0; }
		
		//"de"
		public Keyword getDeKeyword_1_1() { return cDeKeyword_1_1; }
		
		//"finir"
		public Keyword getFinirKeyword_1_2() { return cFinirKeyword_1_2; }
		
		//"avec"
		public Keyword getAvecKeyword_1_3() { return cAvecKeyword_1_3; }
		
		//"un"
		public Keyword getUnKeyword_1_4() { return cUnKeyword_1_4; }
		
		//"+4"
		public Keyword getPlusSignDigitFourKeyword_1_5() { return cPlusSignDigitFourKeyword_1_5; }
	}
	public class PenaliteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Penalite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cCommentaireKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cIntempestifKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cContestationsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTribunalKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cPopulaireKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cSiKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLitigeKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLimiteKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cDeKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cTempsKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cPenaliteAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPenaliteSTRINGTerminalRuleCall_4_0 = (RuleCall)cPenaliteAssignment_4.eContents().get(0);
		
		//Penalite:
		//	("commentaire" "intempestif")?
		//	Contestations ("Tribunal" "Populaire" "si" "litige")? ("Limite" "de" "temps")?
		//	penalite=STRING?;
		@Override public ParserRule getRule() { return rule; }
		
		//("commentaire" "intempestif")? Contestations ("Tribunal" "Populaire" "si" "litige")? ("Limite" "de" "temps")?
		//penalite=STRING?
		public Group getGroup() { return cGroup; }
		
		//("commentaire" "intempestif")?
		public Group getGroup_0() { return cGroup_0; }
		
		//"commentaire"
		public Keyword getCommentaireKeyword_0_0() { return cCommentaireKeyword_0_0; }
		
		//"intempestif"
		public Keyword getIntempestifKeyword_0_1() { return cIntempestifKeyword_0_1; }
		
		//Contestations
		public RuleCall getContestationsParserRuleCall_1() { return cContestationsParserRuleCall_1; }
		
		//("Tribunal" "Populaire" "si" "litige")?
		public Group getGroup_2() { return cGroup_2; }
		
		//"Tribunal"
		public Keyword getTribunalKeyword_2_0() { return cTribunalKeyword_2_0; }
		
		//"Populaire"
		public Keyword getPopulaireKeyword_2_1() { return cPopulaireKeyword_2_1; }
		
		//"si"
		public Keyword getSiKeyword_2_2() { return cSiKeyword_2_2; }
		
		//"litige"
		public Keyword getLitigeKeyword_2_3() { return cLitigeKeyword_2_3; }
		
		//("Limite" "de" "temps")?
		public Group getGroup_3() { return cGroup_3; }
		
		//"Limite"
		public Keyword getLimiteKeyword_3_0() { return cLimiteKeyword_3_0; }
		
		//"de"
		public Keyword getDeKeyword_3_1() { return cDeKeyword_3_1; }
		
		//"temps"
		public Keyword getTempsKeyword_3_2() { return cTempsKeyword_3_2; }
		
		//penalite=STRING?
		public Assignment getPenaliteAssignment_4() { return cPenaliteAssignment_4; }
		
		//STRING
		public RuleCall getPenaliteSTRINGTerminalRuleCall_4_0() { return cPenaliteSTRINGTerminalRuleCall_4_0; }
	}
	public class ContestationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Contestations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPlusKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cDigitFourKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cTromperKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Contestations:
		//	("plus" "4")? ("se" "tromper")?;
		@Override public ParserRule getRule() { return rule; }
		
		//("plus" "4")? ("se" "tromper")?
		public Group getGroup() { return cGroup; }
		
		//("plus" "4")?
		public Group getGroup_0() { return cGroup_0; }
		
		//"plus"
		public Keyword getPlusKeyword_0_0() { return cPlusKeyword_0_0; }
		
		//"4"
		public Keyword getDigitFourKeyword_0_1() { return cDigitFourKeyword_0_1; }
		
		//("se" "tromper")?
		public Group getGroup_1() { return cGroup_1; }
		
		//"se"
		public Keyword getSeKeyword_1_0() { return cSeKeyword_1_0; }
		
		//"tromper"
		public Keyword getTromperKeyword_1_1() { return cTromperKeyword_1_1; }
	}
	public class FinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Fin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFdmAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFdmFin_de_mancheParserRuleCall_0_0 = (RuleCall)cFdmAssignment_0.eContents().get(0);
		private final Assignment cFdpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFdpFin_de_partieParserRuleCall_1_0 = (RuleCall)cFdpAssignment_1.eContents().get(0);
		
		//Fin:
		//	fdm=Fin_de_manche? fdp=Fin_de_partie;
		@Override public ParserRule getRule() { return rule; }
		
		//fdm=Fin_de_manche? fdp=Fin_de_partie
		public Group getGroup() { return cGroup; }
		
		//fdm=Fin_de_manche?
		public Assignment getFdmAssignment_0() { return cFdmAssignment_0; }
		
		//Fin_de_manche
		public RuleCall getFdmFin_de_mancheParserRuleCall_0_0() { return cFdmFin_de_mancheParserRuleCall_0_0; }
		
		//fdp=Fin_de_partie
		public Assignment getFdpAssignment_1() { return cFdpAssignment_1; }
		
		//Fin_de_partie
		public RuleCall getFdpFin_de_partieParserRuleCall_1_0() { return cFdpFin_de_partieParserRuleCall_1_0; }
	}
	public class Fin_de_mancheElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Fin_de_manche");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cUnoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Fin_de_manche:
		//	"Dire" "Uno";
		@Override public ParserRule getRule() { return rule; }
		
		//"Dire" "Uno"
		public Group getGroup() { return cGroup; }
		
		//"Dire"
		public Keyword getDireKeyword_0() { return cDireKeyword_0; }
		
		//"Uno"
		public Keyword getUnoKeyword_1() { return cUnoKeyword_1; }
	}
	public class Fin_de_partieElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Fin_de_partie");
		private final RuleCall cVainqueurParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Fin_de_partie:
		//	Vainqueur;
		@Override public ParserRule getRule() { return rule; }
		
		//Vainqueur
		public RuleCall getVainqueurParserRuleCall() { return cVainqueurParserRuleCall; }
	}
	public class VainqueurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyUnoDsl.Vainqueur");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNombreKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cDeKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cManchesKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cGagnEsKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cMoinsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cDeKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cPointsKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cDernierKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cBattleKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cRoyaleKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cPlusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cDeKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cPointsKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Vainqueur:
		//	"nombre" "de" "manches" "gagnées"
		//	| "moins" "de" "points"
		//	| "dernier" ":" "battle" "royale"
		//	| "plus" "de" "points";
		@Override public ParserRule getRule() { return rule; }
		
		//"nombre" "de" "manches" "gagnées" | "moins" "de" "points" | "dernier" ":" "battle" "royale" | "plus" "de" "points"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"nombre" "de" "manches" "gagnées"
		public Group getGroup_0() { return cGroup_0; }
		
		//"nombre"
		public Keyword getNombreKeyword_0_0() { return cNombreKeyword_0_0; }
		
		//"de"
		public Keyword getDeKeyword_0_1() { return cDeKeyword_0_1; }
		
		//"manches"
		public Keyword getManchesKeyword_0_2() { return cManchesKeyword_0_2; }
		
		//"gagnées"
		public Keyword getGagnEsKeyword_0_3() { return cGagnEsKeyword_0_3; }
		
		//"moins" "de" "points"
		public Group getGroup_1() { return cGroup_1; }
		
		//"moins"
		public Keyword getMoinsKeyword_1_0() { return cMoinsKeyword_1_0; }
		
		//"de"
		public Keyword getDeKeyword_1_1() { return cDeKeyword_1_1; }
		
		//"points"
		public Keyword getPointsKeyword_1_2() { return cPointsKeyword_1_2; }
		
		//"dernier" ":" "battle" "royale"
		public Group getGroup_2() { return cGroup_2; }
		
		//"dernier"
		public Keyword getDernierKeyword_2_0() { return cDernierKeyword_2_0; }
		
		//":"
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//"battle"
		public Keyword getBattleKeyword_2_2() { return cBattleKeyword_2_2; }
		
		//"royale"
		public Keyword getRoyaleKeyword_2_3() { return cRoyaleKeyword_2_3; }
		
		//"plus" "de" "points"
		public Group getGroup_3() { return cGroup_3; }
		
		//"plus"
		public Keyword getPlusKeyword_3_0() { return cPlusKeyword_3_0; }
		
		//"de"
		public Keyword getDeKeyword_3_1() { return cDeKeyword_3_1; }
		
		//"points"
		public Keyword getPointsKeyword_3_2() { return cPointsKeyword_3_2; }
	}
	
	
	private final ModelElements pModel;
	private final ConfigurationElements pConfiguration;
	private final MainElements pMain;
	private final VisibiliteElements pVisibilite;
	private final Nombre_de_mains_de_departElements pNombre_de_mains_de_depart;
	private final Nombre_de_cartes_de_departElements pNombre_de_cartes_de_depart;
	private final Nombre_de_Talons_de_departElements pNombre_de_Talons_de_depart;
	private final RotationElements pRotation;
	private final EquipeElements pEquipe;
	private final DeroulementElements pDeroulement;
	private final PiocherElements pPiocher;
	private final Nombre_de_carteElements pNombre_de_carte;
	private final CartesElements pCartes;
	private final Cumul_CartesElements pCumul_Cartes;
	private final Cumul_cartes_plusElements pCumul_cartes_plus;
	private final Jouer_plusieurs_cartesElements pJouer_plusieurs_cartes;
	private final SuitesElements pSuites;
	private final Cartes_Uno_SpecialesElements pCartes_Uno_Speciales;
	private final PlusElements pPlus;
	private final Couper_le_jeuElements pCouper_le_jeu;
	private final Meme_nombreElements pMeme_nombre;
	private final Changer_de_mainsElements pChanger_de_mains;
	private final Seven_0Elements pSeven_0;
	private final Plus4Elements pPlus4;
	private final PenaliteElements pPenalite;
	private final ContestationsElements pContestations;
	private final FinElements pFin;
	private final Fin_de_mancheElements pFin_de_manche;
	private final Fin_de_partieElements pFin_de_partie;
	private final VainqueurElements pVainqueur;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyUnoDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pConfiguration = new ConfigurationElements();
		this.pMain = new MainElements();
		this.pVisibilite = new VisibiliteElements();
		this.pNombre_de_mains_de_depart = new Nombre_de_mains_de_departElements();
		this.pNombre_de_cartes_de_depart = new Nombre_de_cartes_de_departElements();
		this.pNombre_de_Talons_de_depart = new Nombre_de_Talons_de_departElements();
		this.pRotation = new RotationElements();
		this.pEquipe = new EquipeElements();
		this.pDeroulement = new DeroulementElements();
		this.pPiocher = new PiocherElements();
		this.pNombre_de_carte = new Nombre_de_carteElements();
		this.pCartes = new CartesElements();
		this.pCumul_Cartes = new Cumul_CartesElements();
		this.pCumul_cartes_plus = new Cumul_cartes_plusElements();
		this.pJouer_plusieurs_cartes = new Jouer_plusieurs_cartesElements();
		this.pSuites = new SuitesElements();
		this.pCartes_Uno_Speciales = new Cartes_Uno_SpecialesElements();
		this.pPlus = new PlusElements();
		this.pCouper_le_jeu = new Couper_le_jeuElements();
		this.pMeme_nombre = new Meme_nombreElements();
		this.pChanger_de_mains = new Changer_de_mainsElements();
		this.pSeven_0 = new Seven_0Elements();
		this.pPlus4 = new Plus4Elements();
		this.pPenalite = new PenaliteElements();
		this.pContestations = new ContestationsElements();
		this.pFin = new FinElements();
		this.pFin_de_manche = new Fin_de_mancheElements();
		this.pFin_de_partie = new Fin_de_partieElements();
		this.pVainqueur = new VainqueurElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyUnoDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	uno=Configuration deroulement=Deroulement? fin=Fin;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Configuration:
	//	Main nbt=Nombre_de_Talons_de_depart rot=Rotation equ=Equipe;
	public ConfigurationElements getConfigurationAccess() {
		return pConfiguration;
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}
	
	//Main:
	//	visibilite=Visibilite nbm=Nombre_de_mains_de_depart nbc=Nombre_de_cartes_de_depart;
	public MainElements getMainAccess() {
		return pMain;
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}
	
	//Visibilite:
	//	"Visible"
	//	| "Cachée";
	public VisibiliteElements getVisibiliteAccess() {
		return pVisibilite;
	}
	
	public ParserRule getVisibiliteRule() {
		return getVisibiliteAccess().getRule();
	}
	
	//Nombre_de_mains_de_depart:
	//	"1" "main"
	//	| "Plusieurs" "mains";
	public Nombre_de_mains_de_departElements getNombre_de_mains_de_departAccess() {
		return pNombre_de_mains_de_depart;
	}
	
	public ParserRule getNombre_de_mains_de_departRule() {
		return getNombre_de_mains_de_departAccess().getRule();
	}
	
	//Nombre_de_cartes_de_depart:
	//	"7" "cartes"
	//	| "4" "cartes"
	//	| "7-15" "cartes";
	public Nombre_de_cartes_de_departElements getNombre_de_cartes_de_departAccess() {
		return pNombre_de_cartes_de_depart;
	}
	
	public ParserRule getNombre_de_cartes_de_departRule() {
		return getNombre_de_cartes_de_departAccess().getRule();
	}
	
	//Nombre_de_Talons_de_depart:
	//	"1" "talon"
	//	| "3" "talons";
	public Nombre_de_Talons_de_departElements getNombre_de_Talons_de_departAccess() {
		return pNombre_de_Talons_de_depart;
	}
	
	public ParserRule getNombre_de_Talons_de_departRule() {
		return getNombre_de_Talons_de_departAccess().getRule();
	}
	
	//Rotation:
	//	"Sens" "des" "aiguilles" "dune" "montre"
	//	| "Sens" "contraire" "des" "aiguilles" "dune" "montre"
	//	| "Sens" "de" "distribution";
	public RotationElements getRotationAccess() {
		return pRotation;
	}
	
	public ParserRule getRotationRule() {
		return getRotationAccess().getRule();
	}
	
	//Equipe:
	//	"Solo"
	//	| "Equipes";
	public EquipeElements getEquipeAccess() {
		return pEquipe;
	}
	
	public ParserRule getEquipeRule() {
		return getEquipeAccess().getRule();
	}
	
	//Deroulement:
	//	piocher=Piocher cartes=Cartes pen+=Penalite?;
	public DeroulementElements getDeroulementAccess() {
		return pDeroulement;
	}
	
	public ParserRule getDeroulementRule() {
		return getDeroulementAccess().getRule();
	}
	
	//Piocher:
	//	nbr=Nombre_de_carte (optp="Piocher" "seulement" "si" "on" "ne" "peut" "pas" "jouer")?;
	public PiocherElements getPiocherAccess() {
		return pPiocher;
	}
	
	public ParserRule getPiocherRule() {
		return getPiocherAccess().getRule();
	}
	
	//Nombre_de_carte:
	//	"1" "carte"
	//	| "jusquà" "3";
	public Nombre_de_carteElements getNombre_de_carteAccess() {
		return pNombre_de_carte;
	}
	
	public ParserRule getNombre_de_carteRule() {
		return getNombre_de_carteAccess().getRule();
	}
	
	//Cartes:
	//	cc=Cumul_Cartes? jpc=Jouer_plusieurs_cartes? clj=Couper_le_jeu? cdm=Changer_de_mains? p4=Plus4;
	public CartesElements getCartesAccess() {
		return pCartes;
	}
	
	public ParserRule getCartesRule() {
		return getCartesAccess().getRule();
	}
	
	//Cumul_Cartes:
	//	eff="effet"? ccp=Cumul_cartes_plus?;
	public Cumul_CartesElements getCumul_CartesAccess() {
		return pCumul_Cartes;
	}
	
	public ParserRule getCumul_CartesRule() {
		return getCumul_CartesAccess().getRule();
	}
	
	//Cumul_cartes_plus:
	//	"Plus2"? "Plus4"?;
	public Cumul_cartes_plusElements getCumul_cartes_plusAccess() {
		return pCumul_cartes_plus;
	}
	
	public ParserRule getCumul_cartes_plusRule() {
		return getCumul_cartes_plusAccess().getRule();
	}
	
	//Jouer_plusieurs_cartes:
	//	s=Suites? "couleur"? "nombre"? cus=cartes_Uno_Speciales?;
	public Jouer_plusieurs_cartesElements getJouer_plusieurs_cartesAccess() {
		return pJouer_plusieurs_cartes;
	}
	
	public ParserRule getJouer_plusieurs_cartesRule() {
		return getJouer_plusieurs_cartesAccess().getRule();
	}
	
	//Suites:
	//	"Suite" sr="suite_royale"?;
	public SuitesElements getSuitesAccess() {
		return pSuites;
	}
	
	public ParserRule getSuitesRule() {
		return getSuitesAccess().getRule();
	}
	
	//cartes_Uno_Speciales:
	//	"cartes" "Uno" "speciales" Plus;
	public Cartes_Uno_SpecialesElements getCartes_Uno_SpecialesAccess() {
		return pCartes_Uno_Speciales;
	}
	
	public ParserRule getCartes_Uno_SpecialesRule() {
		return getCartes_Uno_SpecialesAccess().getRule();
	}
	
	//Plus:
	//	("plus" "2")? ("plus" "4")?;
	public PlusElements getPlusAccess() {
		return pPlus;
	}
	
	public ParserRule getPlusRule() {
		return getPlusAccess().getRule();
	}
	
	//Couper_le_jeu:
	//	Meme_nombre?;
	public Couper_le_jeuElements getCouper_le_jeuAccess() {
		return pCouper_le_jeu;
	}
	
	public ParserRule getCouper_le_jeuRule() {
		return getCouper_le_jeuAccess().getRule();
	}
	
	//Meme_nombre:
	//	("meme" "nombre")? ("meme" "carte")?;
	public Meme_nombreElements getMeme_nombreAccess() {
		return pMeme_nombre;
	}
	
	public ParserRule getMeme_nombreRule() {
		return getMeme_nombreAccess().getRule();
	}
	
	//Changer_de_mains:
	//	Seven_0;
	public Changer_de_mainsElements getChanger_de_mainsAccess() {
		return pChanger_de_mains;
	}
	
	public ParserRule getChanger_de_mainsRule() {
		return getChanger_de_mainsAccess().getRule();
	}
	
	//Seven_0:
	//	"Sept"? "Zero"?;
	public Seven_0Elements getSeven_0Access() {
		return pSeven_0;
	}
	
	public ParserRule getSeven_0Rule() {
		return getSeven_0Access().getRule();
	}
	
	//Plus4:
	//	("+4" "seulement" "si" "rien" "dautre")? ("Interdit" "de" "finir" "avec" "un" "+4")?;
	public Plus4Elements getPlus4Access() {
		return pPlus4;
	}
	
	public ParserRule getPlus4Rule() {
		return getPlus4Access().getRule();
	}
	
	//Penalite:
	//	("commentaire" "intempestif")?
	//	Contestations ("Tribunal" "Populaire" "si" "litige")? ("Limite" "de" "temps")?
	//	penalite=STRING?;
	public PenaliteElements getPenaliteAccess() {
		return pPenalite;
	}
	
	public ParserRule getPenaliteRule() {
		return getPenaliteAccess().getRule();
	}
	
	//Contestations:
	//	("plus" "4")? ("se" "tromper")?;
	public ContestationsElements getContestationsAccess() {
		return pContestations;
	}
	
	public ParserRule getContestationsRule() {
		return getContestationsAccess().getRule();
	}
	
	//Fin:
	//	fdm=Fin_de_manche? fdp=Fin_de_partie;
	public FinElements getFinAccess() {
		return pFin;
	}
	
	public ParserRule getFinRule() {
		return getFinAccess().getRule();
	}
	
	//Fin_de_manche:
	//	"Dire" "Uno";
	public Fin_de_mancheElements getFin_de_mancheAccess() {
		return pFin_de_manche;
	}
	
	public ParserRule getFin_de_mancheRule() {
		return getFin_de_mancheAccess().getRule();
	}
	
	//Fin_de_partie:
	//	Vainqueur;
	public Fin_de_partieElements getFin_de_partieAccess() {
		return pFin_de_partie;
	}
	
	public ParserRule getFin_de_partieRule() {
		return getFin_de_partieAccess().getRule();
	}
	
	//Vainqueur:
	//	"nombre" "de" "manches" "gagnées"
	//	| "moins" "de" "points"
	//	| "dernier" ":" "battle" "royale"
	//	| "plus" "de" "points";
	public VainqueurElements getVainqueurAccess() {
		return pVainqueur;
	}
	
	public ParserRule getVainqueurRule() {
		return getVainqueurAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
