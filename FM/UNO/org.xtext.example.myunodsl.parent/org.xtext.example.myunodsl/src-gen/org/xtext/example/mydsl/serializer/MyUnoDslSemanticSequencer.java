/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myUnoDsl.Cartes;
import org.xtext.example.mydsl.myUnoDsl.Cumul_Cartes;
import org.xtext.example.mydsl.myUnoDsl.Deroulement;
import org.xtext.example.mydsl.myUnoDsl.Fin;
import org.xtext.example.mydsl.myUnoDsl.Jouer_plusieurs_cartes;
import org.xtext.example.mydsl.myUnoDsl.Main;
import org.xtext.example.mydsl.myUnoDsl.Model;
import org.xtext.example.mydsl.myUnoDsl.MyUnoDslPackage;
import org.xtext.example.mydsl.myUnoDsl.Penalite;
import org.xtext.example.mydsl.myUnoDsl.Piocher;
import org.xtext.example.mydsl.myUnoDsl.Suites;
import org.xtext.example.mydsl.services.MyUnoDslGrammarAccess;

@SuppressWarnings("all")
public class MyUnoDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyUnoDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyUnoDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyUnoDslPackage.CARTES:
				sequence_Cartes(context, (Cartes) semanticObject); 
				return; 
			case MyUnoDslPackage.CUMUL_CARTES:
				sequence_Cumul_Cartes(context, (Cumul_Cartes) semanticObject); 
				return; 
			case MyUnoDslPackage.DEROULEMENT:
				sequence_Deroulement(context, (Deroulement) semanticObject); 
				return; 
			case MyUnoDslPackage.FIN:
				sequence_Fin(context, (Fin) semanticObject); 
				return; 
			case MyUnoDslPackage.JOUER_PLUSIEURS_CARTES:
				sequence_Jouer_plusieurs_cartes(context, (Jouer_plusieurs_cartes) semanticObject); 
				return; 
			case MyUnoDslPackage.MAIN:
				if (rule == grammarAccess.getConfigurationRule()) {
					sequence_Configuration_Main(context, (Main) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMainRule()) {
					sequence_Main(context, (Main) semanticObject); 
					return; 
				}
				else break;
			case MyUnoDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyUnoDslPackage.PENALITE:
				sequence_Penalite(context, (Penalite) semanticObject); 
				return; 
			case MyUnoDslPackage.PIOCHER:
				sequence_Piocher(context, (Piocher) semanticObject); 
				return; 
			case MyUnoDslPackage.SUITES:
				sequence_Suites(context, (Suites) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Cartes returns Cartes
	 *
	 * Constraint:
	 *     (cc=Cumul_Cartes? jpc=Jouer_plusieurs_cartes? clj=Couper_le_jeu? cdm=Changer_de_mains? p4=Plus4)
	 */
	protected void sequence_Cartes(ISerializationContext context, Cartes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Configuration returns Main
	 *
	 * Constraint:
	 *     (
	 *         visibilite=Visibilite 
	 *         nbm=Nombre_de_mains_de_depart 
	 *         nbc=Nombre_de_cartes_de_depart 
	 *         nbt=Nombre_de_Talons_de_depart 
	 *         rot=Rotation 
	 *         equ=Equipe
	 *     )
	 */
	protected void sequence_Configuration_Main(ISerializationContext context, Main semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyUnoDslPackage.Literals.MAIN__VISIBILITE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoDslPackage.Literals.MAIN__VISIBILITE));
			if (transientValues.isValueTransient(semanticObject, MyUnoDslPackage.Literals.MAIN__NBM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoDslPackage.Literals.MAIN__NBM));
			if (transientValues.isValueTransient(semanticObject, MyUnoDslPackage.Literals.MAIN__NBC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoDslPackage.Literals.MAIN__NBC));
			if (transientValues.isValueTransient(semanticObject, MyUnoDslPackage.Literals.MAIN__NBT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoDslPackage.Literals.MAIN__NBT));
			if (transientValues.isValueTransient(semanticObject, MyUnoDslPackage.Literals.MAIN__ROT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoDslPackage.Literals.MAIN__ROT));
			if (transientValues.isValueTransient(semanticObject, MyUnoDslPackage.Literals.MAIN__EQU) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoDslPackage.Literals.MAIN__EQU));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMainAccess().getVisibiliteVisibiliteParserRuleCall_0_0(), semanticObject.getVisibilite());
		feeder.accept(grammarAccess.getMainAccess().getNbmNombre_de_mains_de_departParserRuleCall_1_0(), semanticObject.getNbm());
		feeder.accept(grammarAccess.getMainAccess().getNbcNombre_de_cartes_de_departParserRuleCall_2_0(), semanticObject.getNbc());
		feeder.accept(grammarAccess.getConfigurationAccess().getNbtNombre_de_Talons_de_departParserRuleCall_1_0(), semanticObject.getNbt());
		feeder.accept(grammarAccess.getConfigurationAccess().getRotRotationParserRuleCall_2_0(), semanticObject.getRot());
		feeder.accept(grammarAccess.getConfigurationAccess().getEquEquipeParserRuleCall_3_0(), semanticObject.getEqu());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Cumul_Cartes returns Cumul_Cartes
	 *
	 * Constraint:
	 *     ((eff='effet' ccp=Cumul_cartes_plus) | ccp=Cumul_cartes_plus)?
	 */
	protected void sequence_Cumul_Cartes(ISerializationContext context, Cumul_Cartes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Deroulement returns Deroulement
	 *
	 * Constraint:
	 *     (piocher=Piocher cartes=Cartes pen+=Penalite?)
	 */
	protected void sequence_Deroulement(ISerializationContext context, Deroulement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Fin returns Fin
	 *
	 * Constraint:
	 *     (fdm=Fin_de_manche? fdp=Fin_de_partie)
	 */
	protected void sequence_Fin(ISerializationContext context, Fin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Jouer_plusieurs_cartes returns Jouer_plusieurs_cartes
	 *
	 * Constraint:
	 *     (s=Suites? cus=cartes_Uno_Speciales?)
	 */
	protected void sequence_Jouer_plusieurs_cartes(ISerializationContext context, Jouer_plusieurs_cartes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Main returns Main
	 *
	 * Constraint:
	 *     (visibilite=Visibilite nbm=Nombre_de_mains_de_depart nbc=Nombre_de_cartes_de_depart)
	 */
	protected void sequence_Main(ISerializationContext context, Main semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyUnoDslPackage.Literals.MAIN__VISIBILITE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoDslPackage.Literals.MAIN__VISIBILITE));
			if (transientValues.isValueTransient(semanticObject, MyUnoDslPackage.Literals.MAIN__NBM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoDslPackage.Literals.MAIN__NBM));
			if (transientValues.isValueTransient(semanticObject, MyUnoDslPackage.Literals.MAIN__NBC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoDslPackage.Literals.MAIN__NBC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMainAccess().getVisibiliteVisibiliteParserRuleCall_0_0(), semanticObject.getVisibilite());
		feeder.accept(grammarAccess.getMainAccess().getNbmNombre_de_mains_de_departParserRuleCall_1_0(), semanticObject.getNbm());
		feeder.accept(grammarAccess.getMainAccess().getNbcNombre_de_cartes_de_departParserRuleCall_2_0(), semanticObject.getNbc());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (uno=Configuration deroulement=Deroulement? fin=Fin)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Penalite returns Penalite
	 *
	 * Constraint:
	 *     penalite=STRING
	 */
	protected void sequence_Penalite(ISerializationContext context, Penalite semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyUnoDslPackage.Literals.PENALITE__PENALITE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoDslPackage.Literals.PENALITE__PENALITE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPenaliteAccess().getPenaliteSTRINGTerminalRuleCall_4_0(), semanticObject.getPenalite());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Piocher returns Piocher
	 *
	 * Constraint:
	 *     (nbr=Nombre_de_carte optp='Piocher'?)
	 */
	protected void sequence_Piocher(ISerializationContext context, Piocher semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Suites returns Suites
	 *
	 * Constraint:
	 *     sr='suite_royale'
	 */
	protected void sequence_Suites(ISerializationContext context, Suites semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyUnoDslPackage.Literals.SUITES__SR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUnoDslPackage.Literals.SUITES__SR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSuitesAccess().getSrSuite_royaleKeyword_1_0(), semanticObject.getSr());
		feeder.finish();
	}
	
	
}
